
c031c6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fcc  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  0800308c  0800308c  0000408c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003168  08003168  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003168  08003168  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003168  08003168  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003168  08003168  00004168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800316c  0800316c  0000416c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003170  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000148  2000000c  0800317c  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000154  0800317c  00005154  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aa49  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001afd  00000000  00000000  0000fa7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007c8  00000000  00000000  00011580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000604  00000000  00000000  00011d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000124fb  00000000  00000000  0001234c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000aa62  00000000  00000000  00024847  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00071df8  00000000  00000000  0002f2a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a10a1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ae0  00000000  00000000  000a10e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000a2bc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003074 	.word	0x08003074

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003074 	.word	0x08003074

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b096      	sub	sp, #88	@ 0x58
 80003f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003fa:	f000 fb34 	bl	8000a66 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003fe:	f000 f85d 	bl	80004bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000402:	f000 f97b 	bl	80006fc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000406:	f000 f89d 	bl	8000544 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800040a:	f000 f917 	bl	800063c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  uint8_t Test[] = "Digite algo para ser recebido (As vezes é necessario digitar mais de uma vez)\r\n";
 800040e:	1d3a      	adds	r2, r7, #4
 8000410:	4b28      	ldr	r3, [pc, #160]	@ (80004b4 <main+0xc0>)
 8000412:	0010      	movs	r0, r2
 8000414:	0019      	movs	r1, r3
 8000416:	2351      	movs	r3, #81	@ 0x51
 8000418:	001a      	movs	r2, r3
 800041a:	f002 fe21 	bl	8003060 <memcpy>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //CHAVE apertado
	  	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == 0){
 800041e:	23a0      	movs	r3, #160	@ 0xa0
 8000420:	05db      	lsls	r3, r3, #23
 8000422:	2110      	movs	r1, #16
 8000424:	0018      	movs	r0, r3
 8000426:	f000 feeb 	bl	8001200 <HAL_GPIO_ReadPin>
 800042a:	1e03      	subs	r3, r0, #0
 800042c:	d108      	bne.n	8000440 <main+0x4c>
	  		  huart1.Init.BaudRate = 19200;
 800042e:	4b22      	ldr	r3, [pc, #136]	@ (80004b8 <main+0xc4>)
 8000430:	2296      	movs	r2, #150	@ 0x96
 8000432:	01d2      	lsls	r2, r2, #7
 8000434:	605a      	str	r2, [r3, #4]
	  		  HAL_UART_Init(&huart1);
 8000436:	4b20      	ldr	r3, [pc, #128]	@ (80004b8 <main+0xc4>)
 8000438:	0018      	movs	r0, r3
 800043a:	f001 fb7b 	bl	8001b34 <HAL_UART_Init>
 800043e:	e007      	b.n	8000450 <main+0x5c>
	  	  }
	  	  //Botão não apertado
	  	  else{
	  		  huart1.Init.BaudRate = 115200;
 8000440:	4b1d      	ldr	r3, [pc, #116]	@ (80004b8 <main+0xc4>)
 8000442:	22e1      	movs	r2, #225	@ 0xe1
 8000444:	0252      	lsls	r2, r2, #9
 8000446:	605a      	str	r2, [r3, #4]
	  		  HAL_UART_Init(&huart1);
 8000448:	4b1b      	ldr	r3, [pc, #108]	@ (80004b8 <main+0xc4>)
 800044a:	0018      	movs	r0, r3
 800044c:	f001 fb72 	bl	8001b34 <HAL_UART_Init>
	  	  }

        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6,1);
 8000450:	23a0      	movs	r3, #160	@ 0xa0
 8000452:	05db      	lsls	r3, r3, #23
 8000454:	2201      	movs	r2, #1
 8000456:	2140      	movs	r1, #64	@ 0x40
 8000458:	0018      	movs	r0, r3
 800045a:	f000 feee 	bl	800123a <HAL_GPIO_WritePin>
	      HAL_UART_Transmit(&huart1, Test, sizeof(Test), HAL_MAX_DELAY);
 800045e:	2301      	movs	r3, #1
 8000460:	425b      	negs	r3, r3
 8000462:	1d39      	adds	r1, r7, #4
 8000464:	4814      	ldr	r0, [pc, #80]	@ (80004b8 <main+0xc4>)
 8000466:	2251      	movs	r2, #81	@ 0x51
 8000468:	f001 fbba 	bl	8001be0 <HAL_UART_Transmit>
	      HAL_Delay(20);
 800046c:	2014      	movs	r0, #20
 800046e:	f000 fb77 	bl	8000b60 <HAL_Delay>
	      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6,0);
 8000472:	23a0      	movs	r3, #160	@ 0xa0
 8000474:	05db      	lsls	r3, r3, #23
 8000476:	2200      	movs	r2, #0
 8000478:	2140      	movs	r1, #64	@ 0x40
 800047a:	0018      	movs	r0, r3
 800047c:	f000 fedd 	bl	800123a <HAL_GPIO_WritePin>
	      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7,1);
 8000480:	23a0      	movs	r3, #160	@ 0xa0
 8000482:	05db      	lsls	r3, r3, #23
 8000484:	2201      	movs	r2, #1
 8000486:	2180      	movs	r1, #128	@ 0x80
 8000488:	0018      	movs	r0, r3
 800048a:	f000 fed6 	bl	800123a <HAL_GPIO_WritePin>
	      HAL_UART_Receive(&huart1, recive, 4, HAL_MAX_DELAY);
 800048e:	2301      	movs	r3, #1
 8000490:	425b      	negs	r3, r3
 8000492:	0039      	movs	r1, r7
 8000494:	4808      	ldr	r0, [pc, #32]	@ (80004b8 <main+0xc4>)
 8000496:	2204      	movs	r2, #4
 8000498:	f001 fc46 	bl	8001d28 <HAL_UART_Receive>
	      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7,0);
 800049c:	23a0      	movs	r3, #160	@ 0xa0
 800049e:	05db      	lsls	r3, r3, #23
 80004a0:	2200      	movs	r2, #0
 80004a2:	2180      	movs	r1, #128	@ 0x80
 80004a4:	0018      	movs	r0, r3
 80004a6:	f000 fec8 	bl	800123a <HAL_GPIO_WritePin>
	      HAL_Delay(100);
 80004aa:	2064      	movs	r0, #100	@ 0x64
 80004ac:	f000 fb58 	bl	8000b60 <HAL_Delay>
	  	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4) == 0){
 80004b0:	e7b5      	b.n	800041e <main+0x2a>
 80004b2:	46c0      	nop			@ (mov r8, r8)
 80004b4:	0800308c 	.word	0x0800308c
 80004b8:	20000028 	.word	0x20000028

080004bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004bc:	b590      	push	{r4, r7, lr}
 80004be:	b08d      	sub	sp, #52	@ 0x34
 80004c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004c2:	2414      	movs	r4, #20
 80004c4:	193b      	adds	r3, r7, r4
 80004c6:	0018      	movs	r0, r3
 80004c8:	231c      	movs	r3, #28
 80004ca:	001a      	movs	r2, r3
 80004cc:	2100      	movs	r1, #0
 80004ce:	f002 fd9b 	bl	8003008 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004d2:	003b      	movs	r3, r7
 80004d4:	0018      	movs	r0, r3
 80004d6:	2314      	movs	r3, #20
 80004d8:	001a      	movs	r2, r3
 80004da:	2100      	movs	r1, #0
 80004dc:	f002 fd94 	bl	8003008 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004e0:	193b      	adds	r3, r7, r4
 80004e2:	2202      	movs	r2, #2
 80004e4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004e6:	193b      	adds	r3, r7, r4
 80004e8:	2280      	movs	r2, #128	@ 0x80
 80004ea:	0052      	lsls	r2, r2, #1
 80004ec:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV4;
 80004ee:	193b      	adds	r3, r7, r4
 80004f0:	2280      	movs	r2, #128	@ 0x80
 80004f2:	0152      	lsls	r2, r2, #5
 80004f4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004f6:	193b      	adds	r3, r7, r4
 80004f8:	2240      	movs	r2, #64	@ 0x40
 80004fa:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004fc:	193b      	adds	r3, r7, r4
 80004fe:	0018      	movs	r0, r3
 8000500:	f000 feb8 	bl	8001274 <HAL_RCC_OscConfig>
 8000504:	1e03      	subs	r3, r0, #0
 8000506:	d001      	beq.n	800050c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000508:	f000 f94c 	bl	80007a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800050c:	003b      	movs	r3, r7
 800050e:	2207      	movs	r2, #7
 8000510:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000512:	003b      	movs	r3, r7
 8000514:	2200      	movs	r2, #0
 8000516:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000518:	003b      	movs	r3, r7
 800051a:	2200      	movs	r2, #0
 800051c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800051e:	003b      	movs	r3, r7
 8000520:	2200      	movs	r2, #0
 8000522:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000524:	003b      	movs	r3, r7
 8000526:	2200      	movs	r2, #0
 8000528:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800052a:	003b      	movs	r3, r7
 800052c:	2100      	movs	r1, #0
 800052e:	0018      	movs	r0, r3
 8000530:	f001 f884 	bl	800163c <HAL_RCC_ClockConfig>
 8000534:	1e03      	subs	r3, r0, #0
 8000536:	d001      	beq.n	800053c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000538:	f000 f934 	bl	80007a4 <Error_Handler>
  }
}
 800053c:	46c0      	nop			@ (mov r8, r8)
 800053e:	46bd      	mov	sp, r7
 8000540:	b00d      	add	sp, #52	@ 0x34
 8000542:	bd90      	pop	{r4, r7, pc}

08000544 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b086      	sub	sp, #24
 8000548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800054a:	1d3b      	adds	r3, r7, #4
 800054c:	0018      	movs	r0, r3
 800054e:	2314      	movs	r3, #20
 8000550:	001a      	movs	r2, r3
 8000552:	2100      	movs	r1, #0
 8000554:	f002 fd58 	bl	8003008 <memset>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000558:	4b34      	ldr	r3, [pc, #208]	@ (800062c <MX_USART1_UART_Init+0xe8>)
 800055a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800055c:	4b33      	ldr	r3, [pc, #204]	@ (800062c <MX_USART1_UART_Init+0xe8>)
 800055e:	2102      	movs	r1, #2
 8000560:	430a      	orrs	r2, r1
 8000562:	635a      	str	r2, [r3, #52]	@ 0x34
 8000564:	4b31      	ldr	r3, [pc, #196]	@ (800062c <MX_USART1_UART_Init+0xe8>)
 8000566:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000568:	2202      	movs	r2, #2
 800056a:	4013      	ands	r3, r2
 800056c:	603b      	str	r3, [r7, #0]
 800056e:	683b      	ldr	r3, [r7, #0]
  // PB6     ------> USART2_TX
  // PB7     ------> USART2_RX
  GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_7;
 8000570:	1d3b      	adds	r3, r7, #4
 8000572:	22c0      	movs	r2, #192	@ 0xc0
 8000574:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000576:	1d3b      	adds	r3, r7, #4
 8000578:	2202      	movs	r2, #2
 800057a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057c:	1d3b      	adds	r3, r7, #4
 800057e:	2200      	movs	r2, #0
 8000580:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000582:	1d3b      	adds	r3, r7, #4
 8000584:	2200      	movs	r2, #0
 8000586:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8000588:	1d3b      	adds	r3, r7, #4
 800058a:	2200      	movs	r2, #0
 800058c:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800058e:	1d3b      	adds	r3, r7, #4
 8000590:	4a27      	ldr	r2, [pc, #156]	@ (8000630 <MX_USART1_UART_Init+0xec>)
 8000592:	0019      	movs	r1, r3
 8000594:	0010      	movs	r0, r2
 8000596:	f000 fcc1 	bl	8000f1c <HAL_GPIO_Init>
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800059a:	4b26      	ldr	r3, [pc, #152]	@ (8000634 <MX_USART1_UART_Init+0xf0>)
 800059c:	4a26      	ldr	r2, [pc, #152]	@ (8000638 <MX_USART1_UART_Init+0xf4>)
 800059e:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80005a0:	4b24      	ldr	r3, [pc, #144]	@ (8000634 <MX_USART1_UART_Init+0xf0>)
 80005a2:	22e1      	movs	r2, #225	@ 0xe1
 80005a4:	0252      	lsls	r2, r2, #9
 80005a6:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005a8:	4b22      	ldr	r3, [pc, #136]	@ (8000634 <MX_USART1_UART_Init+0xf0>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005ae:	4b21      	ldr	r3, [pc, #132]	@ (8000634 <MX_USART1_UART_Init+0xf0>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005b4:	4b1f      	ldr	r3, [pc, #124]	@ (8000634 <MX_USART1_UART_Init+0xf0>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005ba:	4b1e      	ldr	r3, [pc, #120]	@ (8000634 <MX_USART1_UART_Init+0xf0>)
 80005bc:	220c      	movs	r2, #12
 80005be:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005c0:	4b1c      	ldr	r3, [pc, #112]	@ (8000634 <MX_USART1_UART_Init+0xf0>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005c6:	4b1b      	ldr	r3, [pc, #108]	@ (8000634 <MX_USART1_UART_Init+0xf0>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005cc:	4b19      	ldr	r3, [pc, #100]	@ (8000634 <MX_USART1_UART_Init+0xf0>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80005d2:	4b18      	ldr	r3, [pc, #96]	@ (8000634 <MX_USART1_UART_Init+0xf0>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005d8:	4b16      	ldr	r3, [pc, #88]	@ (8000634 <MX_USART1_UART_Init+0xf0>)
 80005da:	2200      	movs	r2, #0
 80005dc:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80005de:	4b15      	ldr	r3, [pc, #84]	@ (8000634 <MX_USART1_UART_Init+0xf0>)
 80005e0:	0018      	movs	r0, r3
 80005e2:	f001 faa7 	bl	8001b34 <HAL_UART_Init>
 80005e6:	1e03      	subs	r3, r0, #0
 80005e8:	d001      	beq.n	80005ee <MX_USART1_UART_Init+0xaa>
  {
    Error_Handler();
 80005ea:	f000 f8db 	bl	80007a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80005ee:	4b11      	ldr	r3, [pc, #68]	@ (8000634 <MX_USART1_UART_Init+0xf0>)
 80005f0:	2100      	movs	r1, #0
 80005f2:	0018      	movs	r0, r3
 80005f4:	f002 fc28 	bl	8002e48 <HAL_UARTEx_SetTxFifoThreshold>
 80005f8:	1e03      	subs	r3, r0, #0
 80005fa:	d001      	beq.n	8000600 <MX_USART1_UART_Init+0xbc>
  {
    Error_Handler();
 80005fc:	f000 f8d2 	bl	80007a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000600:	4b0c      	ldr	r3, [pc, #48]	@ (8000634 <MX_USART1_UART_Init+0xf0>)
 8000602:	2100      	movs	r1, #0
 8000604:	0018      	movs	r0, r3
 8000606:	f002 fc5f 	bl	8002ec8 <HAL_UARTEx_SetRxFifoThreshold>
 800060a:	1e03      	subs	r3, r0, #0
 800060c:	d001      	beq.n	8000612 <MX_USART1_UART_Init+0xce>
  {
    Error_Handler();
 800060e:	f000 f8c9 	bl	80007a4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000612:	4b08      	ldr	r3, [pc, #32]	@ (8000634 <MX_USART1_UART_Init+0xf0>)
 8000614:	0018      	movs	r0, r3
 8000616:	f002 fbdd 	bl	8002dd4 <HAL_UARTEx_DisableFifoMode>
 800061a:	1e03      	subs	r3, r0, #0
 800061c:	d001      	beq.n	8000622 <MX_USART1_UART_Init+0xde>
  {
    Error_Handler();
 800061e:	f000 f8c1 	bl	80007a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000622:	46c0      	nop			@ (mov r8, r8)
 8000624:	46bd      	mov	sp, r7
 8000626:	b006      	add	sp, #24
 8000628:	bd80      	pop	{r7, pc}
 800062a:	46c0      	nop			@ (mov r8, r8)
 800062c:	40021000 	.word	0x40021000
 8000630:	50000400 	.word	0x50000400
 8000634:	20000028 	.word	0x20000028
 8000638:	40013800 	.word	0x40013800

0800063c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b086      	sub	sp, #24
 8000640:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000642:	1d3b      	adds	r3, r7, #4
 8000644:	0018      	movs	r0, r3
 8000646:	2314      	movs	r3, #20
 8000648:	001a      	movs	r2, r3
 800064a:	2100      	movs	r1, #0
 800064c:	f002 fcdc 	bl	8003008 <memset>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000650:	4b27      	ldr	r3, [pc, #156]	@ (80006f0 <MX_USART2_UART_Init+0xb4>)
 8000652:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000654:	4b26      	ldr	r3, [pc, #152]	@ (80006f0 <MX_USART2_UART_Init+0xb4>)
 8000656:	2101      	movs	r1, #1
 8000658:	430a      	orrs	r2, r1
 800065a:	635a      	str	r2, [r3, #52]	@ 0x34
 800065c:	4b24      	ldr	r3, [pc, #144]	@ (80006f0 <MX_USART2_UART_Init+0xb4>)
 800065e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000660:	2201      	movs	r2, #1
 8000662:	4013      	ands	r3, r2
 8000664:	603b      	str	r3, [r7, #0]
 8000666:	683b      	ldr	r3, [r7, #0]
  // PA2     ------> USART2_TX
  // PA3     ------> USART2_RX
  GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 8000668:	1d3b      	adds	r3, r7, #4
 800066a:	220c      	movs	r2, #12
 800066c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800066e:	1d3b      	adds	r3, r7, #4
 8000670:	2202      	movs	r2, #2
 8000672:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000674:	1d3b      	adds	r3, r7, #4
 8000676:	2200      	movs	r2, #0
 8000678:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800067a:	1d3b      	adds	r3, r7, #4
 800067c:	2200      	movs	r2, #0
 800067e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000680:	1d3b      	adds	r3, r7, #4
 8000682:	2201      	movs	r2, #1
 8000684:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000686:	1d3a      	adds	r2, r7, #4
 8000688:	23a0      	movs	r3, #160	@ 0xa0
 800068a:	05db      	lsls	r3, r3, #23
 800068c:	0011      	movs	r1, r2
 800068e:	0018      	movs	r0, r3
 8000690:	f000 fc44 	bl	8000f1c <HAL_GPIO_Init>
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000694:	4b17      	ldr	r3, [pc, #92]	@ (80006f4 <MX_USART2_UART_Init+0xb8>)
 8000696:	4a18      	ldr	r2, [pc, #96]	@ (80006f8 <MX_USART2_UART_Init+0xbc>)
 8000698:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800069a:	4b16      	ldr	r3, [pc, #88]	@ (80006f4 <MX_USART2_UART_Init+0xb8>)
 800069c:	22e1      	movs	r2, #225	@ 0xe1
 800069e:	0252      	lsls	r2, r2, #9
 80006a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006a2:	4b14      	ldr	r3, [pc, #80]	@ (80006f4 <MX_USART2_UART_Init+0xb8>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006a8:	4b12      	ldr	r3, [pc, #72]	@ (80006f4 <MX_USART2_UART_Init+0xb8>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006ae:	4b11      	ldr	r3, [pc, #68]	@ (80006f4 <MX_USART2_UART_Init+0xb8>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006b4:	4b0f      	ldr	r3, [pc, #60]	@ (80006f4 <MX_USART2_UART_Init+0xb8>)
 80006b6:	220c      	movs	r2, #12
 80006b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ba:	4b0e      	ldr	r3, [pc, #56]	@ (80006f4 <MX_USART2_UART_Init+0xb8>)
 80006bc:	2200      	movs	r2, #0
 80006be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006c0:	4b0c      	ldr	r3, [pc, #48]	@ (80006f4 <MX_USART2_UART_Init+0xb8>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006c6:	4b0b      	ldr	r3, [pc, #44]	@ (80006f4 <MX_USART2_UART_Init+0xb8>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006cc:	4b09      	ldr	r3, [pc, #36]	@ (80006f4 <MX_USART2_UART_Init+0xb8>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006d2:	4b08      	ldr	r3, [pc, #32]	@ (80006f4 <MX_USART2_UART_Init+0xb8>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006d8:	4b06      	ldr	r3, [pc, #24]	@ (80006f4 <MX_USART2_UART_Init+0xb8>)
 80006da:	0018      	movs	r0, r3
 80006dc:	f001 fa2a 	bl	8001b34 <HAL_UART_Init>
 80006e0:	1e03      	subs	r3, r0, #0
 80006e2:	d001      	beq.n	80006e8 <MX_USART2_UART_Init+0xac>
  {
    Error_Handler();
 80006e4:	f000 f85e 	bl	80007a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006e8:	46c0      	nop			@ (mov r8, r8)
 80006ea:	46bd      	mov	sp, r7
 80006ec:	b006      	add	sp, #24
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	40021000 	.word	0x40021000
 80006f4:	200000bc 	.word	0x200000bc
 80006f8:	40004400 	.word	0x40004400

080006fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006fc:	b590      	push	{r4, r7, lr}
 80006fe:	b089      	sub	sp, #36	@ 0x24
 8000700:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000702:	240c      	movs	r4, #12
 8000704:	193b      	adds	r3, r7, r4
 8000706:	0018      	movs	r0, r3
 8000708:	2314      	movs	r3, #20
 800070a:	001a      	movs	r2, r3
 800070c:	2100      	movs	r1, #0
 800070e:	f002 fc7b 	bl	8003008 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000712:	4b23      	ldr	r3, [pc, #140]	@ (80007a0 <MX_GPIO_Init+0xa4>)
 8000714:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000716:	4b22      	ldr	r3, [pc, #136]	@ (80007a0 <MX_GPIO_Init+0xa4>)
 8000718:	2104      	movs	r1, #4
 800071a:	430a      	orrs	r2, r1
 800071c:	635a      	str	r2, [r3, #52]	@ 0x34
 800071e:	4b20      	ldr	r3, [pc, #128]	@ (80007a0 <MX_GPIO_Init+0xa4>)
 8000720:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000722:	2204      	movs	r2, #4
 8000724:	4013      	ands	r3, r2
 8000726:	60bb      	str	r3, [r7, #8]
 8000728:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800072a:	4b1d      	ldr	r3, [pc, #116]	@ (80007a0 <MX_GPIO_Init+0xa4>)
 800072c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800072e:	4b1c      	ldr	r3, [pc, #112]	@ (80007a0 <MX_GPIO_Init+0xa4>)
 8000730:	2101      	movs	r1, #1
 8000732:	430a      	orrs	r2, r1
 8000734:	635a      	str	r2, [r3, #52]	@ 0x34
 8000736:	4b1a      	ldr	r3, [pc, #104]	@ (80007a0 <MX_GPIO_Init+0xa4>)
 8000738:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800073a:	2201      	movs	r2, #1
 800073c:	4013      	ands	r3, r2
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000742:	23a0      	movs	r3, #160	@ 0xa0
 8000744:	05db      	lsls	r3, r3, #23
 8000746:	2200      	movs	r2, #0
 8000748:	21c0      	movs	r1, #192	@ 0xc0
 800074a:	0018      	movs	r0, r3
 800074c:	f000 fd75 	bl	800123a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000750:	193b      	adds	r3, r7, r4
 8000752:	2210      	movs	r2, #16
 8000754:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000756:	193b      	adds	r3, r7, r4
 8000758:	2200      	movs	r2, #0
 800075a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075c:	193b      	adds	r3, r7, r4
 800075e:	2200      	movs	r2, #0
 8000760:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000762:	193a      	adds	r2, r7, r4
 8000764:	23a0      	movs	r3, #160	@ 0xa0
 8000766:	05db      	lsls	r3, r3, #23
 8000768:	0011      	movs	r1, r2
 800076a:	0018      	movs	r0, r3
 800076c:	f000 fbd6 	bl	8000f1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000770:	0021      	movs	r1, r4
 8000772:	187b      	adds	r3, r7, r1
 8000774:	22c0      	movs	r2, #192	@ 0xc0
 8000776:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000778:	187b      	adds	r3, r7, r1
 800077a:	2201      	movs	r2, #1
 800077c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077e:	187b      	adds	r3, r7, r1
 8000780:	2200      	movs	r2, #0
 8000782:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000784:	187b      	adds	r3, r7, r1
 8000786:	2200      	movs	r2, #0
 8000788:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800078a:	187a      	adds	r2, r7, r1
 800078c:	23a0      	movs	r3, #160	@ 0xa0
 800078e:	05db      	lsls	r3, r3, #23
 8000790:	0011      	movs	r1, r2
 8000792:	0018      	movs	r0, r3
 8000794:	f000 fbc2 	bl	8000f1c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000798:	46c0      	nop			@ (mov r8, r8)
 800079a:	46bd      	mov	sp, r7
 800079c:	b009      	add	sp, #36	@ 0x24
 800079e:	bd90      	pop	{r4, r7, pc}
 80007a0:	40021000 	.word	0x40021000

080007a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007a8:	b672      	cpsid	i
}
 80007aa:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007ac:	46c0      	nop			@ (mov r8, r8)
 80007ae:	e7fd      	b.n	80007ac <Error_Handler+0x8>

080007b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007b6:	4b0f      	ldr	r3, [pc, #60]	@ (80007f4 <HAL_MspInit+0x44>)
 80007b8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80007ba:	4b0e      	ldr	r3, [pc, #56]	@ (80007f4 <HAL_MspInit+0x44>)
 80007bc:	2101      	movs	r1, #1
 80007be:	430a      	orrs	r2, r1
 80007c0:	641a      	str	r2, [r3, #64]	@ 0x40
 80007c2:	4b0c      	ldr	r3, [pc, #48]	@ (80007f4 <HAL_MspInit+0x44>)
 80007c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007c6:	2201      	movs	r2, #1
 80007c8:	4013      	ands	r3, r2
 80007ca:	607b      	str	r3, [r7, #4]
 80007cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ce:	4b09      	ldr	r3, [pc, #36]	@ (80007f4 <HAL_MspInit+0x44>)
 80007d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80007d2:	4b08      	ldr	r3, [pc, #32]	@ (80007f4 <HAL_MspInit+0x44>)
 80007d4:	2180      	movs	r1, #128	@ 0x80
 80007d6:	0549      	lsls	r1, r1, #21
 80007d8:	430a      	orrs	r2, r1
 80007da:	63da      	str	r2, [r3, #60]	@ 0x3c
 80007dc:	4b05      	ldr	r3, [pc, #20]	@ (80007f4 <HAL_MspInit+0x44>)
 80007de:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80007e0:	2380      	movs	r3, #128	@ 0x80
 80007e2:	055b      	lsls	r3, r3, #21
 80007e4:	4013      	ands	r3, r2
 80007e6:	603b      	str	r3, [r7, #0]
 80007e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ea:	46c0      	nop			@ (mov r8, r8)
 80007ec:	46bd      	mov	sp, r7
 80007ee:	b002      	add	sp, #8
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	46c0      	nop			@ (mov r8, r8)
 80007f4:	40021000 	.word	0x40021000

080007f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007f8:	b590      	push	{r4, r7, lr}
 80007fa:	b095      	sub	sp, #84	@ 0x54
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000800:	233c      	movs	r3, #60	@ 0x3c
 8000802:	18fb      	adds	r3, r7, r3
 8000804:	0018      	movs	r0, r3
 8000806:	2314      	movs	r3, #20
 8000808:	001a      	movs	r2, r3
 800080a:	2100      	movs	r1, #0
 800080c:	f002 fbfc 	bl	8003008 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000810:	2420      	movs	r4, #32
 8000812:	193b      	adds	r3, r7, r4
 8000814:	0018      	movs	r0, r3
 8000816:	231c      	movs	r3, #28
 8000818:	001a      	movs	r2, r3
 800081a:	2100      	movs	r1, #0
 800081c:	f002 fbf4 	bl	8003008 <memset>
  if(huart->Instance==USART1)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a58      	ldr	r2, [pc, #352]	@ (8000988 <HAL_UART_MspInit+0x190>)
 8000826:	4293      	cmp	r3, r2
 8000828:	d16b      	bne.n	8000902 <HAL_UART_MspInit+0x10a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800082a:	193b      	adds	r3, r7, r4
 800082c:	2201      	movs	r2, #1
 800082e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000830:	193b      	adds	r3, r7, r4
 8000832:	2200      	movs	r2, #0
 8000834:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000836:	193b      	adds	r3, r7, r4
 8000838:	0018      	movs	r0, r3
 800083a:	f001 f88f 	bl	800195c <HAL_RCCEx_PeriphCLKConfig>
 800083e:	1e03      	subs	r3, r0, #0
 8000840:	d001      	beq.n	8000846 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000842:	f7ff ffaf 	bl	80007a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000846:	4b51      	ldr	r3, [pc, #324]	@ (800098c <HAL_UART_MspInit+0x194>)
 8000848:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800084a:	4b50      	ldr	r3, [pc, #320]	@ (800098c <HAL_UART_MspInit+0x194>)
 800084c:	2180      	movs	r1, #128	@ 0x80
 800084e:	01c9      	lsls	r1, r1, #7
 8000850:	430a      	orrs	r2, r1
 8000852:	641a      	str	r2, [r3, #64]	@ 0x40
 8000854:	4b4d      	ldr	r3, [pc, #308]	@ (800098c <HAL_UART_MspInit+0x194>)
 8000856:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000858:	2380      	movs	r3, #128	@ 0x80
 800085a:	01db      	lsls	r3, r3, #7
 800085c:	4013      	ands	r3, r2
 800085e:	61fb      	str	r3, [r7, #28]
 8000860:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000862:	4b4a      	ldr	r3, [pc, #296]	@ (800098c <HAL_UART_MspInit+0x194>)
 8000864:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000866:	4b49      	ldr	r3, [pc, #292]	@ (800098c <HAL_UART_MspInit+0x194>)
 8000868:	2104      	movs	r1, #4
 800086a:	430a      	orrs	r2, r1
 800086c:	635a      	str	r2, [r3, #52]	@ 0x34
 800086e:	4b47      	ldr	r3, [pc, #284]	@ (800098c <HAL_UART_MspInit+0x194>)
 8000870:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000872:	2204      	movs	r2, #4
 8000874:	4013      	ands	r3, r2
 8000876:	61bb      	str	r3, [r7, #24]
 8000878:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800087a:	4b44      	ldr	r3, [pc, #272]	@ (800098c <HAL_UART_MspInit+0x194>)
 800087c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800087e:	4b43      	ldr	r3, [pc, #268]	@ (800098c <HAL_UART_MspInit+0x194>)
 8000880:	2101      	movs	r1, #1
 8000882:	430a      	orrs	r2, r1
 8000884:	635a      	str	r2, [r3, #52]	@ 0x34
 8000886:	4b41      	ldr	r3, [pc, #260]	@ (800098c <HAL_UART_MspInit+0x194>)
 8000888:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800088a:	2201      	movs	r2, #1
 800088c:	4013      	ands	r3, r2
 800088e:	617b      	str	r3, [r7, #20]
 8000890:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PC14-OSCX_IN (PC14)     ------> USART1_TX
    PA1     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000892:	213c      	movs	r1, #60	@ 0x3c
 8000894:	187b      	adds	r3, r7, r1
 8000896:	2280      	movs	r2, #128	@ 0x80
 8000898:	01d2      	lsls	r2, r2, #7
 800089a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089c:	000c      	movs	r4, r1
 800089e:	193b      	adds	r3, r7, r4
 80008a0:	2202      	movs	r2, #2
 80008a2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	193b      	adds	r3, r7, r4
 80008a6:	2200      	movs	r2, #0
 80008a8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008aa:	193b      	adds	r3, r7, r4
 80008ac:	2200      	movs	r2, #0
 80008ae:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 80008b0:	193b      	adds	r3, r7, r4
 80008b2:	2200      	movs	r2, #0
 80008b4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008b6:	193b      	adds	r3, r7, r4
 80008b8:	4a35      	ldr	r2, [pc, #212]	@ (8000990 <HAL_UART_MspInit+0x198>)
 80008ba:	0019      	movs	r1, r3
 80008bc:	0010      	movs	r0, r2
 80008be:	f000 fb2d 	bl	8000f1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80008c2:	0021      	movs	r1, r4
 80008c4:	187b      	adds	r3, r7, r1
 80008c6:	2202      	movs	r2, #2
 80008c8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ca:	187b      	adds	r3, r7, r1
 80008cc:	2202      	movs	r2, #2
 80008ce:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	187b      	adds	r3, r7, r1
 80008d2:	2200      	movs	r2, #0
 80008d4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d6:	187b      	adds	r3, r7, r1
 80008d8:	2200      	movs	r2, #0
 80008da:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80008dc:	187b      	adds	r3, r7, r1
 80008de:	2204      	movs	r2, #4
 80008e0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e2:	187a      	adds	r2, r7, r1
 80008e4:	23a0      	movs	r3, #160	@ 0xa0
 80008e6:	05db      	lsls	r3, r3, #23
 80008e8:	0011      	movs	r1, r2
 80008ea:	0018      	movs	r0, r3
 80008ec:	f000 fb16 	bl	8000f1c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80008f0:	2200      	movs	r2, #0
 80008f2:	2100      	movs	r1, #0
 80008f4:	201b      	movs	r0, #27
 80008f6:	f000 fa03 	bl	8000d00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80008fa:	201b      	movs	r0, #27
 80008fc:	f000 fa15 	bl	8000d2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000900:	e03d      	b.n	800097e <HAL_UART_MspInit+0x186>
  else if(huart->Instance==USART2)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	4a23      	ldr	r2, [pc, #140]	@ (8000994 <HAL_UART_MspInit+0x19c>)
 8000908:	4293      	cmp	r3, r2
 800090a:	d138      	bne.n	800097e <HAL_UART_MspInit+0x186>
    __HAL_RCC_USART2_CLK_ENABLE();
 800090c:	4b1f      	ldr	r3, [pc, #124]	@ (800098c <HAL_UART_MspInit+0x194>)
 800090e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000910:	4b1e      	ldr	r3, [pc, #120]	@ (800098c <HAL_UART_MspInit+0x194>)
 8000912:	2180      	movs	r1, #128	@ 0x80
 8000914:	0289      	lsls	r1, r1, #10
 8000916:	430a      	orrs	r2, r1
 8000918:	63da      	str	r2, [r3, #60]	@ 0x3c
 800091a:	4b1c      	ldr	r3, [pc, #112]	@ (800098c <HAL_UART_MspInit+0x194>)
 800091c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800091e:	2380      	movs	r3, #128	@ 0x80
 8000920:	029b      	lsls	r3, r3, #10
 8000922:	4013      	ands	r3, r2
 8000924:	613b      	str	r3, [r7, #16]
 8000926:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000928:	4b18      	ldr	r3, [pc, #96]	@ (800098c <HAL_UART_MspInit+0x194>)
 800092a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800092c:	4b17      	ldr	r3, [pc, #92]	@ (800098c <HAL_UART_MspInit+0x194>)
 800092e:	2101      	movs	r1, #1
 8000930:	430a      	orrs	r2, r1
 8000932:	635a      	str	r2, [r3, #52]	@ 0x34
 8000934:	4b15      	ldr	r3, [pc, #84]	@ (800098c <HAL_UART_MspInit+0x194>)
 8000936:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000938:	2201      	movs	r2, #1
 800093a:	4013      	ands	r3, r2
 800093c:	60fb      	str	r3, [r7, #12]
 800093e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000940:	213c      	movs	r1, #60	@ 0x3c
 8000942:	187b      	adds	r3, r7, r1
 8000944:	220c      	movs	r2, #12
 8000946:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000948:	187b      	adds	r3, r7, r1
 800094a:	2202      	movs	r2, #2
 800094c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	187b      	adds	r3, r7, r1
 8000950:	2200      	movs	r2, #0
 8000952:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000954:	187b      	adds	r3, r7, r1
 8000956:	2200      	movs	r2, #0
 8000958:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800095a:	187b      	adds	r3, r7, r1
 800095c:	2201      	movs	r2, #1
 800095e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000960:	187a      	adds	r2, r7, r1
 8000962:	23a0      	movs	r3, #160	@ 0xa0
 8000964:	05db      	lsls	r3, r3, #23
 8000966:	0011      	movs	r1, r2
 8000968:	0018      	movs	r0, r3
 800096a:	f000 fad7 	bl	8000f1c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800096e:	2200      	movs	r2, #0
 8000970:	2100      	movs	r1, #0
 8000972:	201c      	movs	r0, #28
 8000974:	f000 f9c4 	bl	8000d00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000978:	201c      	movs	r0, #28
 800097a:	f000 f9d6 	bl	8000d2a <HAL_NVIC_EnableIRQ>
}
 800097e:	46c0      	nop			@ (mov r8, r8)
 8000980:	46bd      	mov	sp, r7
 8000982:	b015      	add	sp, #84	@ 0x54
 8000984:	bd90      	pop	{r4, r7, pc}
 8000986:	46c0      	nop			@ (mov r8, r8)
 8000988:	40013800 	.word	0x40013800
 800098c:	40021000 	.word	0x40021000
 8000990:	50000800 	.word	0x50000800
 8000994:	40004400 	.word	0x40004400

08000998 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800099c:	46c0      	nop			@ (mov r8, r8)
 800099e:	e7fd      	b.n	800099c <NMI_Handler+0x4>

080009a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009a4:	46c0      	nop			@ (mov r8, r8)
 80009a6:	e7fd      	b.n	80009a4 <HardFault_Handler+0x4>

080009a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80009ac:	46c0      	nop			@ (mov r8, r8)
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}

080009b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009b2:	b580      	push	{r7, lr}
 80009b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009b6:	46c0      	nop			@ (mov r8, r8)
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}

080009bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009c0:	f000 f8b2 	bl	8000b28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009c4:	46c0      	nop			@ (mov r8, r8)
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
	...

080009cc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 interrupt.
  */
void USART1_IRQHandler(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80009d0:	4b03      	ldr	r3, [pc, #12]	@ (80009e0 <USART1_IRQHandler+0x14>)
 80009d2:	0018      	movs	r0, r3
 80009d4:	f001 fa8e 	bl	8001ef4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80009d8:	46c0      	nop			@ (mov r8, r8)
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	46c0      	nop			@ (mov r8, r8)
 80009e0:	20000028 	.word	0x20000028

080009e4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 interrupt.
  */
void USART2_IRQHandler(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80009e8:	4b03      	ldr	r3, [pc, #12]	@ (80009f8 <USART2_IRQHandler+0x14>)
 80009ea:	0018      	movs	r0, r3
 80009ec:	f001 fa82 	bl	8001ef4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80009f0:	46c0      	nop			@ (mov r8, r8)
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	46c0      	nop			@ (mov r8, r8)
 80009f8:	200000bc 	.word	0x200000bc

080009fc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a00:	4b03      	ldr	r3, [pc, #12]	@ (8000a10 <SystemInit+0x14>)
 8000a02:	2280      	movs	r2, #128	@ 0x80
 8000a04:	0512      	lsls	r2, r2, #20
 8000a06:	609a      	str	r2, [r3, #8]
#endif
}
 8000a08:	46c0      	nop			@ (mov r8, r8)
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	46c0      	nop			@ (mov r8, r8)
 8000a10:	e000ed00 	.word	0xe000ed00

08000a14 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a14:	480d      	ldr	r0, [pc, #52]	@ (8000a4c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a16:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a18:	f7ff fff0 	bl	80009fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000a1c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000a1e:	e003      	b.n	8000a28 <LoopCopyDataInit>

08000a20 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000a20:	4b0b      	ldr	r3, [pc, #44]	@ (8000a50 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000a22:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000a24:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000a26:	3104      	adds	r1, #4

08000a28 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000a28:	480a      	ldr	r0, [pc, #40]	@ (8000a54 <LoopForever+0xa>)
  ldr r3, =_edata
 8000a2a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a58 <LoopForever+0xe>)
  adds r2, r0, r1
 8000a2c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000a2e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000a30:	d3f6      	bcc.n	8000a20 <CopyDataInit>
  ldr r2, =_sbss
 8000a32:	4a0a      	ldr	r2, [pc, #40]	@ (8000a5c <LoopForever+0x12>)
  b LoopFillZerobss
 8000a34:	e002      	b.n	8000a3c <LoopFillZerobss>

08000a36 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000a36:	2300      	movs	r3, #0
  str  r3, [r2]
 8000a38:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a3a:	3204      	adds	r2, #4

08000a3c <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000a3c:	4b08      	ldr	r3, [pc, #32]	@ (8000a60 <LoopForever+0x16>)
  cmp r2, r3
 8000a3e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000a40:	d3f9      	bcc.n	8000a36 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000a42:	f002 fae9 	bl	8003018 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a46:	f7ff fcd5 	bl	80003f4 <main>

08000a4a <LoopForever>:

LoopForever:
    b LoopForever
 8000a4a:	e7fe      	b.n	8000a4a <LoopForever>
  ldr   r0, =_estack
 8000a4c:	20003000 	.word	0x20003000
  ldr r3, =_sidata
 8000a50:	08003170 	.word	0x08003170
  ldr r0, =_sdata
 8000a54:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000a58:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000a5c:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000a60:	20000154 	.word	0x20000154

08000a64 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a64:	e7fe      	b.n	8000a64 <ADC1_IRQHandler>

08000a66 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a66:	b580      	push	{r7, lr}
 8000a68:	b082      	sub	sp, #8
 8000a6a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a6c:	1dfb      	adds	r3, r7, #7
 8000a6e:	2200      	movs	r2, #0
 8000a70:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a72:	2003      	movs	r0, #3
 8000a74:	f000 f80e 	bl	8000a94 <HAL_InitTick>
 8000a78:	1e03      	subs	r3, r0, #0
 8000a7a:	d003      	beq.n	8000a84 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000a7c:	1dfb      	adds	r3, r7, #7
 8000a7e:	2201      	movs	r2, #1
 8000a80:	701a      	strb	r2, [r3, #0]
 8000a82:	e001      	b.n	8000a88 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a84:	f7ff fe94 	bl	80007b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a88:	1dfb      	adds	r3, r7, #7
 8000a8a:	781b      	ldrb	r3, [r3, #0]
}
 8000a8c:	0018      	movs	r0, r3
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	b002      	add	sp, #8
 8000a92:	bd80      	pop	{r7, pc}

08000a94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a94:	b590      	push	{r4, r7, lr}
 8000a96:	b085      	sub	sp, #20
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a9c:	230f      	movs	r3, #15
 8000a9e:	18fb      	adds	r3, r7, r3
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8000aa4:	4b1d      	ldr	r3, [pc, #116]	@ (8000b1c <HAL_InitTick+0x88>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d02b      	beq.n	8000b04 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8000aac:	4b1c      	ldr	r3, [pc, #112]	@ (8000b20 <HAL_InitTick+0x8c>)
 8000aae:	681c      	ldr	r4, [r3, #0]
 8000ab0:	4b1a      	ldr	r3, [pc, #104]	@ (8000b1c <HAL_InitTick+0x88>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	0019      	movs	r1, r3
 8000ab6:	23fa      	movs	r3, #250	@ 0xfa
 8000ab8:	0098      	lsls	r0, r3, #2
 8000aba:	f7ff fb25 	bl	8000108 <__udivsi3>
 8000abe:	0003      	movs	r3, r0
 8000ac0:	0019      	movs	r1, r3
 8000ac2:	0020      	movs	r0, r4
 8000ac4:	f7ff fb20 	bl	8000108 <__udivsi3>
 8000ac8:	0003      	movs	r3, r0
 8000aca:	0018      	movs	r0, r3
 8000acc:	f000 f93d 	bl	8000d4a <HAL_SYSTICK_Config>
 8000ad0:	1e03      	subs	r3, r0, #0
 8000ad2:	d112      	bne.n	8000afa <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	2b03      	cmp	r3, #3
 8000ad8:	d80a      	bhi.n	8000af0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ada:	6879      	ldr	r1, [r7, #4]
 8000adc:	2301      	movs	r3, #1
 8000ade:	425b      	negs	r3, r3
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	0018      	movs	r0, r3
 8000ae4:	f000 f90c 	bl	8000d00 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ae8:	4b0e      	ldr	r3, [pc, #56]	@ (8000b24 <HAL_InitTick+0x90>)
 8000aea:	687a      	ldr	r2, [r7, #4]
 8000aec:	601a      	str	r2, [r3, #0]
 8000aee:	e00d      	b.n	8000b0c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000af0:	230f      	movs	r3, #15
 8000af2:	18fb      	adds	r3, r7, r3
 8000af4:	2201      	movs	r2, #1
 8000af6:	701a      	strb	r2, [r3, #0]
 8000af8:	e008      	b.n	8000b0c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000afa:	230f      	movs	r3, #15
 8000afc:	18fb      	adds	r3, r7, r3
 8000afe:	2201      	movs	r2, #1
 8000b00:	701a      	strb	r2, [r3, #0]
 8000b02:	e003      	b.n	8000b0c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b04:	230f      	movs	r3, #15
 8000b06:	18fb      	adds	r3, r7, r3
 8000b08:	2201      	movs	r2, #1
 8000b0a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000b0c:	230f      	movs	r3, #15
 8000b0e:	18fb      	adds	r3, r7, r3
 8000b10:	781b      	ldrb	r3, [r3, #0]
}
 8000b12:	0018      	movs	r0, r3
 8000b14:	46bd      	mov	sp, r7
 8000b16:	b005      	add	sp, #20
 8000b18:	bd90      	pop	{r4, r7, pc}
 8000b1a:	46c0      	nop			@ (mov r8, r8)
 8000b1c:	20000008 	.word	0x20000008
 8000b20:	20000000 	.word	0x20000000
 8000b24:	20000004 	.word	0x20000004

08000b28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b2c:	4b05      	ldr	r3, [pc, #20]	@ (8000b44 <HAL_IncTick+0x1c>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	001a      	movs	r2, r3
 8000b32:	4b05      	ldr	r3, [pc, #20]	@ (8000b48 <HAL_IncTick+0x20>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	18d2      	adds	r2, r2, r3
 8000b38:	4b03      	ldr	r3, [pc, #12]	@ (8000b48 <HAL_IncTick+0x20>)
 8000b3a:	601a      	str	r2, [r3, #0]
}
 8000b3c:	46c0      	nop			@ (mov r8, r8)
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	46c0      	nop			@ (mov r8, r8)
 8000b44:	20000008 	.word	0x20000008
 8000b48:	20000150 	.word	0x20000150

08000b4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b50:	4b02      	ldr	r3, [pc, #8]	@ (8000b5c <HAL_GetTick+0x10>)
 8000b52:	681b      	ldr	r3, [r3, #0]
}
 8000b54:	0018      	movs	r0, r3
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	46c0      	nop			@ (mov r8, r8)
 8000b5c:	20000150 	.word	0x20000150

08000b60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b68:	f7ff fff0 	bl	8000b4c <HAL_GetTick>
 8000b6c:	0003      	movs	r3, r0
 8000b6e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	3301      	adds	r3, #1
 8000b78:	d005      	beq.n	8000b86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b7a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ba4 <HAL_Delay+0x44>)
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	001a      	movs	r2, r3
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	189b      	adds	r3, r3, r2
 8000b84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b86:	46c0      	nop			@ (mov r8, r8)
 8000b88:	f7ff ffe0 	bl	8000b4c <HAL_GetTick>
 8000b8c:	0002      	movs	r2, r0
 8000b8e:	68bb      	ldr	r3, [r7, #8]
 8000b90:	1ad3      	subs	r3, r2, r3
 8000b92:	68fa      	ldr	r2, [r7, #12]
 8000b94:	429a      	cmp	r2, r3
 8000b96:	d8f7      	bhi.n	8000b88 <HAL_Delay+0x28>
  {
  }
}
 8000b98:	46c0      	nop			@ (mov r8, r8)
 8000b9a:	46c0      	nop			@ (mov r8, r8)
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	b004      	add	sp, #16
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	46c0      	nop			@ (mov r8, r8)
 8000ba4:	20000008 	.word	0x20000008

08000ba8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	0002      	movs	r2, r0
 8000bb0:	1dfb      	adds	r3, r7, #7
 8000bb2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000bb4:	1dfb      	adds	r3, r7, #7
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	2b7f      	cmp	r3, #127	@ 0x7f
 8000bba:	d809      	bhi.n	8000bd0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bbc:	1dfb      	adds	r3, r7, #7
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	001a      	movs	r2, r3
 8000bc2:	231f      	movs	r3, #31
 8000bc4:	401a      	ands	r2, r3
 8000bc6:	4b04      	ldr	r3, [pc, #16]	@ (8000bd8 <__NVIC_EnableIRQ+0x30>)
 8000bc8:	2101      	movs	r1, #1
 8000bca:	4091      	lsls	r1, r2
 8000bcc:	000a      	movs	r2, r1
 8000bce:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000bd0:	46c0      	nop			@ (mov r8, r8)
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	b002      	add	sp, #8
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	e000e100 	.word	0xe000e100

08000bdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bdc:	b590      	push	{r4, r7, lr}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	0002      	movs	r2, r0
 8000be4:	6039      	str	r1, [r7, #0]
 8000be6:	1dfb      	adds	r3, r7, #7
 8000be8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000bea:	1dfb      	adds	r3, r7, #7
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	2b7f      	cmp	r3, #127	@ 0x7f
 8000bf0:	d828      	bhi.n	8000c44 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bf2:	4a2f      	ldr	r2, [pc, #188]	@ (8000cb0 <__NVIC_SetPriority+0xd4>)
 8000bf4:	1dfb      	adds	r3, r7, #7
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	b25b      	sxtb	r3, r3
 8000bfa:	089b      	lsrs	r3, r3, #2
 8000bfc:	33c0      	adds	r3, #192	@ 0xc0
 8000bfe:	009b      	lsls	r3, r3, #2
 8000c00:	589b      	ldr	r3, [r3, r2]
 8000c02:	1dfa      	adds	r2, r7, #7
 8000c04:	7812      	ldrb	r2, [r2, #0]
 8000c06:	0011      	movs	r1, r2
 8000c08:	2203      	movs	r2, #3
 8000c0a:	400a      	ands	r2, r1
 8000c0c:	00d2      	lsls	r2, r2, #3
 8000c0e:	21ff      	movs	r1, #255	@ 0xff
 8000c10:	4091      	lsls	r1, r2
 8000c12:	000a      	movs	r2, r1
 8000c14:	43d2      	mvns	r2, r2
 8000c16:	401a      	ands	r2, r3
 8000c18:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	019b      	lsls	r3, r3, #6
 8000c1e:	22ff      	movs	r2, #255	@ 0xff
 8000c20:	401a      	ands	r2, r3
 8000c22:	1dfb      	adds	r3, r7, #7
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	0018      	movs	r0, r3
 8000c28:	2303      	movs	r3, #3
 8000c2a:	4003      	ands	r3, r0
 8000c2c:	00db      	lsls	r3, r3, #3
 8000c2e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c30:	481f      	ldr	r0, [pc, #124]	@ (8000cb0 <__NVIC_SetPriority+0xd4>)
 8000c32:	1dfb      	adds	r3, r7, #7
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	b25b      	sxtb	r3, r3
 8000c38:	089b      	lsrs	r3, r3, #2
 8000c3a:	430a      	orrs	r2, r1
 8000c3c:	33c0      	adds	r3, #192	@ 0xc0
 8000c3e:	009b      	lsls	r3, r3, #2
 8000c40:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000c42:	e031      	b.n	8000ca8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c44:	4a1b      	ldr	r2, [pc, #108]	@ (8000cb4 <__NVIC_SetPriority+0xd8>)
 8000c46:	1dfb      	adds	r3, r7, #7
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	0019      	movs	r1, r3
 8000c4c:	230f      	movs	r3, #15
 8000c4e:	400b      	ands	r3, r1
 8000c50:	3b08      	subs	r3, #8
 8000c52:	089b      	lsrs	r3, r3, #2
 8000c54:	3306      	adds	r3, #6
 8000c56:	009b      	lsls	r3, r3, #2
 8000c58:	18d3      	adds	r3, r2, r3
 8000c5a:	3304      	adds	r3, #4
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	1dfa      	adds	r2, r7, #7
 8000c60:	7812      	ldrb	r2, [r2, #0]
 8000c62:	0011      	movs	r1, r2
 8000c64:	2203      	movs	r2, #3
 8000c66:	400a      	ands	r2, r1
 8000c68:	00d2      	lsls	r2, r2, #3
 8000c6a:	21ff      	movs	r1, #255	@ 0xff
 8000c6c:	4091      	lsls	r1, r2
 8000c6e:	000a      	movs	r2, r1
 8000c70:	43d2      	mvns	r2, r2
 8000c72:	401a      	ands	r2, r3
 8000c74:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	019b      	lsls	r3, r3, #6
 8000c7a:	22ff      	movs	r2, #255	@ 0xff
 8000c7c:	401a      	ands	r2, r3
 8000c7e:	1dfb      	adds	r3, r7, #7
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	0018      	movs	r0, r3
 8000c84:	2303      	movs	r3, #3
 8000c86:	4003      	ands	r3, r0
 8000c88:	00db      	lsls	r3, r3, #3
 8000c8a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c8c:	4809      	ldr	r0, [pc, #36]	@ (8000cb4 <__NVIC_SetPriority+0xd8>)
 8000c8e:	1dfb      	adds	r3, r7, #7
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	001c      	movs	r4, r3
 8000c94:	230f      	movs	r3, #15
 8000c96:	4023      	ands	r3, r4
 8000c98:	3b08      	subs	r3, #8
 8000c9a:	089b      	lsrs	r3, r3, #2
 8000c9c:	430a      	orrs	r2, r1
 8000c9e:	3306      	adds	r3, #6
 8000ca0:	009b      	lsls	r3, r3, #2
 8000ca2:	18c3      	adds	r3, r0, r3
 8000ca4:	3304      	adds	r3, #4
 8000ca6:	601a      	str	r2, [r3, #0]
}
 8000ca8:	46c0      	nop			@ (mov r8, r8)
 8000caa:	46bd      	mov	sp, r7
 8000cac:	b003      	add	sp, #12
 8000cae:	bd90      	pop	{r4, r7, pc}
 8000cb0:	e000e100 	.word	0xe000e100
 8000cb4:	e000ed00 	.word	0xe000ed00

08000cb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	1e5a      	subs	r2, r3, #1
 8000cc4:	2380      	movs	r3, #128	@ 0x80
 8000cc6:	045b      	lsls	r3, r3, #17
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	d301      	bcc.n	8000cd0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ccc:	2301      	movs	r3, #1
 8000cce:	e010      	b.n	8000cf2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cd0:	4b0a      	ldr	r3, [pc, #40]	@ (8000cfc <SysTick_Config+0x44>)
 8000cd2:	687a      	ldr	r2, [r7, #4]
 8000cd4:	3a01      	subs	r2, #1
 8000cd6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cd8:	2301      	movs	r3, #1
 8000cda:	425b      	negs	r3, r3
 8000cdc:	2103      	movs	r1, #3
 8000cde:	0018      	movs	r0, r3
 8000ce0:	f7ff ff7c 	bl	8000bdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ce4:	4b05      	ldr	r3, [pc, #20]	@ (8000cfc <SysTick_Config+0x44>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cea:	4b04      	ldr	r3, [pc, #16]	@ (8000cfc <SysTick_Config+0x44>)
 8000cec:	2207      	movs	r2, #7
 8000cee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cf0:	2300      	movs	r3, #0
}
 8000cf2:	0018      	movs	r0, r3
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	b002      	add	sp, #8
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	46c0      	nop			@ (mov r8, r8)
 8000cfc:	e000e010 	.word	0xe000e010

08000d00 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b084      	sub	sp, #16
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	60b9      	str	r1, [r7, #8]
 8000d08:	607a      	str	r2, [r7, #4]
 8000d0a:	210f      	movs	r1, #15
 8000d0c:	187b      	adds	r3, r7, r1
 8000d0e:	1c02      	adds	r2, r0, #0
 8000d10:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000d12:	68ba      	ldr	r2, [r7, #8]
 8000d14:	187b      	adds	r3, r7, r1
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	b25b      	sxtb	r3, r3
 8000d1a:	0011      	movs	r1, r2
 8000d1c:	0018      	movs	r0, r3
 8000d1e:	f7ff ff5d 	bl	8000bdc <__NVIC_SetPriority>
}
 8000d22:	46c0      	nop			@ (mov r8, r8)
 8000d24:	46bd      	mov	sp, r7
 8000d26:	b004      	add	sp, #16
 8000d28:	bd80      	pop	{r7, pc}

08000d2a <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	b082      	sub	sp, #8
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	0002      	movs	r2, r0
 8000d32:	1dfb      	adds	r3, r7, #7
 8000d34:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d36:	1dfb      	adds	r3, r7, #7
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	b25b      	sxtb	r3, r3
 8000d3c:	0018      	movs	r0, r3
 8000d3e:	f7ff ff33 	bl	8000ba8 <__NVIC_EnableIRQ>
}
 8000d42:	46c0      	nop			@ (mov r8, r8)
 8000d44:	46bd      	mov	sp, r7
 8000d46:	b002      	add	sp, #8
 8000d48:	bd80      	pop	{r7, pc}

08000d4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	b082      	sub	sp, #8
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	0018      	movs	r0, r3
 8000d56:	f7ff ffaf 	bl	8000cb8 <SysTick_Config>
 8000d5a:	0003      	movs	r3, r0
}
 8000d5c:	0018      	movs	r0, r3
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	b002      	add	sp, #8
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d101      	bne.n	8000d76 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000d72:	2301      	movs	r3, #1
 8000d74:	e050      	b.n	8000e18 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2225      	movs	r2, #37	@ 0x25
 8000d7a:	5c9b      	ldrb	r3, [r3, r2]
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	2b02      	cmp	r3, #2
 8000d80:	d008      	beq.n	8000d94 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	2204      	movs	r2, #4
 8000d86:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2224      	movs	r2, #36	@ 0x24
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000d90:	2301      	movs	r3, #1
 8000d92:	e041      	b.n	8000e18 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	210e      	movs	r1, #14
 8000da0:	438a      	bics	r2, r1
 8000da2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dae:	491c      	ldr	r1, [pc, #112]	@ (8000e20 <HAL_DMA_Abort+0xbc>)
 8000db0:	400a      	ands	r2, r1
 8000db2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	2101      	movs	r1, #1
 8000dc0:	438a      	bics	r2, r1
 8000dc2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1cU)));
 8000dc4:	4b17      	ldr	r3, [pc, #92]	@ (8000e24 <HAL_DMA_Abort+0xc0>)
 8000dc6:	6859      	ldr	r1, [r3, #4]
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dcc:	221c      	movs	r2, #28
 8000dce:	4013      	ands	r3, r2
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	409a      	lsls	r2, r3
 8000dd4:	4b13      	ldr	r3, [pc, #76]	@ (8000e24 <HAL_DMA_Abort+0xc0>)
 8000dd6:	430a      	orrs	r2, r1
 8000dd8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000dde:	687a      	ldr	r2, [r7, #4]
 8000de0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8000de2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d00c      	beq.n	8000e06 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000df6:	490a      	ldr	r1, [pc, #40]	@ (8000e20 <HAL_DMA_Abort+0xbc>)
 8000df8:	400a      	ands	r2, r1
 8000dfa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e00:	687a      	ldr	r2, [r7, #4]
 8000e02:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8000e04:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2225      	movs	r2, #37	@ 0x25
 8000e0a:	2101      	movs	r1, #1
 8000e0c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2224      	movs	r2, #36	@ 0x24
 8000e12:	2100      	movs	r1, #0
 8000e14:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8000e16:	2300      	movs	r3, #0
}
 8000e18:	0018      	movs	r0, r3
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	b002      	add	sp, #8
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	fffffeff 	.word	0xfffffeff
 8000e24:	40020000 	.word	0x40020000

08000e28 <HAL_DMA_Abort_IT>:
  * @param  hdma    pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e30:	230f      	movs	r3, #15
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	2200      	movs	r2, #0
 8000e36:	701a      	strb	r2, [r3, #0]

  /* Process Unlocked/locked */
  __HAL_UNLOCK(hdma);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2224      	movs	r2, #36	@ 0x24
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	5499      	strb	r1, [r3, r2]
  __HAL_LOCK(hdma);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2224      	movs	r2, #36	@ 0x24
 8000e44:	5c9b      	ldrb	r3, [r3, r2]
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	d101      	bne.n	8000e4e <HAL_DMA_Abort_IT+0x26>
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	e05e      	b.n	8000f0c <HAL_DMA_Abort_IT+0xe4>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2224      	movs	r2, #36	@ 0x24
 8000e52:	2101      	movs	r1, #1
 8000e54:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2225      	movs	r2, #37	@ 0x25
 8000e5a:	5c9b      	ldrb	r3, [r3, r2]
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	2b02      	cmp	r3, #2
 8000e60:	d007      	beq.n	8000e72 <HAL_DMA_Abort_IT+0x4a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2204      	movs	r2, #4
 8000e66:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000e68:	230f      	movs	r3, #15
 8000e6a:	18fb      	adds	r3, r7, r3
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	701a      	strb	r2, [r3, #0]
 8000e70:	e049      	b.n	8000f06 <HAL_DMA_Abort_IT+0xde>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	210e      	movs	r1, #14
 8000e7e:	438a      	bics	r2, r1
 8000e80:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	2101      	movs	r1, #1
 8000e8e:	438a      	bics	r2, r1
 8000e90:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e9c:	491d      	ldr	r1, [pc, #116]	@ (8000f14 <HAL_DMA_Abort_IT+0xec>)
 8000e9e:	400a      	ands	r2, r1
 8000ea0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 8000ea2:	4b1d      	ldr	r3, [pc, #116]	@ (8000f18 <HAL_DMA_Abort_IT+0xf0>)
 8000ea4:	6859      	ldr	r1, [r3, #4]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eaa:	221c      	movs	r2, #28
 8000eac:	4013      	ands	r3, r2
 8000eae:	2201      	movs	r2, #1
 8000eb0:	409a      	lsls	r2, r3
 8000eb2:	4b19      	ldr	r3, [pc, #100]	@ (8000f18 <HAL_DMA_Abort_IT+0xf0>)
 8000eb4:	430a      	orrs	r2, r1
 8000eb6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ebc:	687a      	ldr	r2, [r7, #4]
 8000ebe:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8000ec0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d00c      	beq.n	8000ee4 <HAL_DMA_Abort_IT+0xbc>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000ed4:	490f      	ldr	r1, [pc, #60]	@ (8000f14 <HAL_DMA_Abort_IT+0xec>)
 8000ed6:	400a      	ands	r2, r1
 8000ed8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000ede:	687a      	ldr	r2, [r7, #4]
 8000ee0:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8000ee2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2225      	movs	r2, #37	@ 0x25
 8000ee8:	2101      	movs	r1, #1
 8000eea:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2224      	movs	r2, #36	@ 0x24
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d004      	beq.n	8000f06 <HAL_DMA_Abort_IT+0xde>
    {
      hdma->XferAbortCallback(hdma);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f00:	687a      	ldr	r2, [r7, #4]
 8000f02:	0010      	movs	r0, r2
 8000f04:	4798      	blx	r3
    }
  }
  return status;
 8000f06:	230f      	movs	r3, #15
 8000f08:	18fb      	adds	r3, r7, r3
 8000f0a:	781b      	ldrb	r3, [r3, #0]
}
 8000f0c:	0018      	movs	r0, r3
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	b004      	add	sp, #16
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	fffffeff 	.word	0xfffffeff
 8000f18:	40020000 	.word	0x40020000

08000f1c <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b086      	sub	sp, #24
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8000f26:	2300      	movs	r3, #0
 8000f28:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000f2a:	e153      	b.n	80011d4 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	2101      	movs	r1, #1
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	4091      	lsls	r1, r2
 8000f36:	000a      	movs	r2, r1
 8000f38:	4013      	ands	r3, r2
 8000f3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d100      	bne.n	8000f44 <HAL_GPIO_Init+0x28>
 8000f42:	e144      	b.n	80011ce <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	2b02      	cmp	r3, #2
 8000f4a:	d003      	beq.n	8000f54 <HAL_GPIO_Init+0x38>
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	2b12      	cmp	r3, #18
 8000f52:	d125      	bne.n	8000fa0 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	08da      	lsrs	r2, r3, #3
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	3208      	adds	r2, #8
 8000f5c:	0092      	lsls	r2, r2, #2
 8000f5e:	58d3      	ldr	r3, [r2, r3]
 8000f60:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	2207      	movs	r2, #7
 8000f66:	4013      	ands	r3, r2
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	220f      	movs	r2, #15
 8000f6c:	409a      	lsls	r2, r3
 8000f6e:	0013      	movs	r3, r2
 8000f70:	43da      	mvns	r2, r3
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	4013      	ands	r3, r2
 8000f76:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	691b      	ldr	r3, [r3, #16]
 8000f7c:	220f      	movs	r2, #15
 8000f7e:	401a      	ands	r2, r3
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	2107      	movs	r1, #7
 8000f84:	400b      	ands	r3, r1
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	409a      	lsls	r2, r3
 8000f8a:	0013      	movs	r3, r2
 8000f8c:	697a      	ldr	r2, [r7, #20]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	08da      	lsrs	r2, r3, #3
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	3208      	adds	r2, #8
 8000f9a:	0092      	lsls	r2, r2, #2
 8000f9c:	6979      	ldr	r1, [r7, #20]
 8000f9e:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	2203      	movs	r2, #3
 8000fac:	409a      	lsls	r2, r3
 8000fae:	0013      	movs	r3, r2
 8000fb0:	43da      	mvns	r2, r3
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	2203      	movs	r2, #3
 8000fbe:	401a      	ands	r2, r3
 8000fc0:	693b      	ldr	r3, [r7, #16]
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	409a      	lsls	r2, r3
 8000fc6:	0013      	movs	r3, r2
 8000fc8:	697a      	ldr	r2, [r7, #20]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	697a      	ldr	r2, [r7, #20]
 8000fd2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d00b      	beq.n	8000ff4 <HAL_GPIO_Init+0xd8>
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	2b02      	cmp	r3, #2
 8000fe2:	d007      	beq.n	8000ff4 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fe8:	2b11      	cmp	r3, #17
 8000fea:	d003      	beq.n	8000ff4 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	2b12      	cmp	r3, #18
 8000ff2:	d130      	bne.n	8001056 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	689b      	ldr	r3, [r3, #8]
 8000ff8:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	2203      	movs	r2, #3
 8001000:	409a      	lsls	r2, r3
 8001002:	0013      	movs	r3, r2
 8001004:	43da      	mvns	r2, r3
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	4013      	ands	r3, r2
 800100a:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	68da      	ldr	r2, [r3, #12]
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	005b      	lsls	r3, r3, #1
 8001014:	409a      	lsls	r2, r3
 8001016:	0013      	movs	r3, r2
 8001018:	697a      	ldr	r2, [r7, #20]
 800101a:	4313      	orrs	r3, r2
 800101c:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	697a      	ldr	r2, [r7, #20]
 8001022:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 800102a:	2201      	movs	r2, #1
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	409a      	lsls	r2, r3
 8001030:	0013      	movs	r3, r2
 8001032:	43da      	mvns	r2, r3
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	4013      	ands	r3, r2
 8001038:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	091b      	lsrs	r3, r3, #4
 8001040:	2201      	movs	r2, #1
 8001042:	401a      	ands	r2, r3
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	409a      	lsls	r2, r3
 8001048:	0013      	movs	r3, r2
 800104a:	697a      	ldr	r2, [r7, #20]
 800104c:	4313      	orrs	r3, r2
 800104e:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	697a      	ldr	r2, [r7, #20]
 8001054:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	2b03      	cmp	r3, #3
 800105c:	d017      	beq.n	800108e <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	68db      	ldr	r3, [r3, #12]
 8001062:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	2203      	movs	r2, #3
 800106a:	409a      	lsls	r2, r3
 800106c:	0013      	movs	r3, r2
 800106e:	43da      	mvns	r2, r3
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	4013      	ands	r3, r2
 8001074:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	689a      	ldr	r2, [r3, #8]
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	409a      	lsls	r2, r3
 8001080:	0013      	movs	r3, r2
 8001082:	697a      	ldr	r2, [r7, #20]
 8001084:	4313      	orrs	r3, r2
 8001086:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	697a      	ldr	r2, [r7, #20]
 800108c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685a      	ldr	r2, [r3, #4]
 8001092:	2380      	movs	r3, #128	@ 0x80
 8001094:	055b      	lsls	r3, r3, #21
 8001096:	4013      	ands	r3, r2
 8001098:	d100      	bne.n	800109c <HAL_GPIO_Init+0x180>
 800109a:	e098      	b.n	80011ce <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800109c:	4a53      	ldr	r2, [pc, #332]	@ (80011ec <HAL_GPIO_Init+0x2d0>)
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	089b      	lsrs	r3, r3, #2
 80010a2:	3318      	adds	r3, #24
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	589b      	ldr	r3, [r3, r2]
 80010a8:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	2203      	movs	r2, #3
 80010ae:	4013      	ands	r3, r2
 80010b0:	00db      	lsls	r3, r3, #3
 80010b2:	220f      	movs	r2, #15
 80010b4:	409a      	lsls	r2, r3
 80010b6:	0013      	movs	r3, r2
 80010b8:	43da      	mvns	r2, r3
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	4013      	ands	r3, r2
 80010be:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80010c0:	687a      	ldr	r2, [r7, #4]
 80010c2:	23a0      	movs	r3, #160	@ 0xa0
 80010c4:	05db      	lsls	r3, r3, #23
 80010c6:	429a      	cmp	r2, r3
 80010c8:	d019      	beq.n	80010fe <HAL_GPIO_Init+0x1e2>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a48      	ldr	r2, [pc, #288]	@ (80011f0 <HAL_GPIO_Init+0x2d4>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d013      	beq.n	80010fa <HAL_GPIO_Init+0x1de>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a47      	ldr	r2, [pc, #284]	@ (80011f4 <HAL_GPIO_Init+0x2d8>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d00d      	beq.n	80010f6 <HAL_GPIO_Init+0x1da>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a46      	ldr	r2, [pc, #280]	@ (80011f8 <HAL_GPIO_Init+0x2dc>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d007      	beq.n	80010f2 <HAL_GPIO_Init+0x1d6>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a45      	ldr	r2, [pc, #276]	@ (80011fc <HAL_GPIO_Init+0x2e0>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d101      	bne.n	80010ee <HAL_GPIO_Init+0x1d2>
 80010ea:	2305      	movs	r3, #5
 80010ec:	e008      	b.n	8001100 <HAL_GPIO_Init+0x1e4>
 80010ee:	2306      	movs	r3, #6
 80010f0:	e006      	b.n	8001100 <HAL_GPIO_Init+0x1e4>
 80010f2:	2303      	movs	r3, #3
 80010f4:	e004      	b.n	8001100 <HAL_GPIO_Init+0x1e4>
 80010f6:	2302      	movs	r3, #2
 80010f8:	e002      	b.n	8001100 <HAL_GPIO_Init+0x1e4>
 80010fa:	2301      	movs	r3, #1
 80010fc:	e000      	b.n	8001100 <HAL_GPIO_Init+0x1e4>
 80010fe:	2300      	movs	r3, #0
 8001100:	693a      	ldr	r2, [r7, #16]
 8001102:	2103      	movs	r1, #3
 8001104:	400a      	ands	r2, r1
 8001106:	00d2      	lsls	r2, r2, #3
 8001108:	4093      	lsls	r3, r2
 800110a:	697a      	ldr	r2, [r7, #20]
 800110c:	4313      	orrs	r3, r2
 800110e:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001110:	4936      	ldr	r1, [pc, #216]	@ (80011ec <HAL_GPIO_Init+0x2d0>)
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	089b      	lsrs	r3, r3, #2
 8001116:	3318      	adds	r3, #24
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	697a      	ldr	r2, [r7, #20]
 800111c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 800111e:	4a33      	ldr	r2, [pc, #204]	@ (80011ec <HAL_GPIO_Init+0x2d0>)
 8001120:	2380      	movs	r3, #128	@ 0x80
 8001122:	58d3      	ldr	r3, [r2, r3]
 8001124:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	43da      	mvns	r2, r3
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	4013      	ands	r3, r2
 800112e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685a      	ldr	r2, [r3, #4]
 8001134:	2380      	movs	r3, #128	@ 0x80
 8001136:	025b      	lsls	r3, r3, #9
 8001138:	4013      	ands	r3, r2
 800113a:	d003      	beq.n	8001144 <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 800113c:	697a      	ldr	r2, [r7, #20]
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	4313      	orrs	r3, r2
 8001142:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001144:	4929      	ldr	r1, [pc, #164]	@ (80011ec <HAL_GPIO_Init+0x2d0>)
 8001146:	2280      	movs	r2, #128	@ 0x80
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 800114c:	4a27      	ldr	r2, [pc, #156]	@ (80011ec <HAL_GPIO_Init+0x2d0>)
 800114e:	2384      	movs	r3, #132	@ 0x84
 8001150:	58d3      	ldr	r3, [r2, r3]
 8001152:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	43da      	mvns	r2, r3
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	4013      	ands	r3, r2
 800115c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685a      	ldr	r2, [r3, #4]
 8001162:	2380      	movs	r3, #128	@ 0x80
 8001164:	029b      	lsls	r3, r3, #10
 8001166:	4013      	ands	r3, r2
 8001168:	d003      	beq.n	8001172 <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 800116a:	697a      	ldr	r2, [r7, #20]
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	4313      	orrs	r3, r2
 8001170:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8001172:	491e      	ldr	r1, [pc, #120]	@ (80011ec <HAL_GPIO_Init+0x2d0>)
 8001174:	2284      	movs	r2, #132	@ 0x84
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800117a:	4b1c      	ldr	r3, [pc, #112]	@ (80011ec <HAL_GPIO_Init+0x2d0>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	43da      	mvns	r2, r3
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	4013      	ands	r3, r2
 8001188:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685a      	ldr	r2, [r3, #4]
 800118e:	2380      	movs	r3, #128	@ 0x80
 8001190:	035b      	lsls	r3, r3, #13
 8001192:	4013      	ands	r3, r2
 8001194:	d003      	beq.n	800119e <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 8001196:	697a      	ldr	r2, [r7, #20]
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	4313      	orrs	r3, r2
 800119c:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 800119e:	4b13      	ldr	r3, [pc, #76]	@ (80011ec <HAL_GPIO_Init+0x2d0>)
 80011a0:	697a      	ldr	r2, [r7, #20]
 80011a2:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 80011a4:	4b11      	ldr	r3, [pc, #68]	@ (80011ec <HAL_GPIO_Init+0x2d0>)
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	43da      	mvns	r2, r3
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	4013      	ands	r3, r2
 80011b2:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685a      	ldr	r2, [r3, #4]
 80011b8:	2380      	movs	r3, #128	@ 0x80
 80011ba:	039b      	lsls	r3, r3, #14
 80011bc:	4013      	ands	r3, r2
 80011be:	d003      	beq.n	80011c8 <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 80011c0:	697a      	ldr	r2, [r7, #20]
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 80011c8:	4b08      	ldr	r3, [pc, #32]	@ (80011ec <HAL_GPIO_Init+0x2d0>)
 80011ca:	697a      	ldr	r2, [r7, #20]
 80011cc:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	3301      	adds	r3, #1
 80011d2:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	40da      	lsrs	r2, r3
 80011dc:	1e13      	subs	r3, r2, #0
 80011de:	d000      	beq.n	80011e2 <HAL_GPIO_Init+0x2c6>
 80011e0:	e6a4      	b.n	8000f2c <HAL_GPIO_Init+0x10>
  }
}
 80011e2:	46c0      	nop			@ (mov r8, r8)
 80011e4:	46c0      	nop			@ (mov r8, r8)
 80011e6:	46bd      	mov	sp, r7
 80011e8:	b006      	add	sp, #24
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	40021800 	.word	0x40021800
 80011f0:	50000400 	.word	0x50000400
 80011f4:	50000800 	.word	0x50000800
 80011f8:	50000c00 	.word	0x50000c00
 80011fc:	50001400 	.word	0x50001400

08001200 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	000a      	movs	r2, r1
 800120a:	1cbb      	adds	r3, r7, #2
 800120c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	691b      	ldr	r3, [r3, #16]
 8001212:	1cba      	adds	r2, r7, #2
 8001214:	8812      	ldrh	r2, [r2, #0]
 8001216:	4013      	ands	r3, r2
 8001218:	d004      	beq.n	8001224 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800121a:	230f      	movs	r3, #15
 800121c:	18fb      	adds	r3, r7, r3
 800121e:	2201      	movs	r2, #1
 8001220:	701a      	strb	r2, [r3, #0]
 8001222:	e003      	b.n	800122c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001224:	230f      	movs	r3, #15
 8001226:	18fb      	adds	r3, r7, r3
 8001228:	2200      	movs	r2, #0
 800122a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800122c:	230f      	movs	r3, #15
 800122e:	18fb      	adds	r3, r7, r3
 8001230:	781b      	ldrb	r3, [r3, #0]
}
 8001232:	0018      	movs	r0, r3
 8001234:	46bd      	mov	sp, r7
 8001236:	b004      	add	sp, #16
 8001238:	bd80      	pop	{r7, pc}

0800123a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800123a:	b580      	push	{r7, lr}
 800123c:	b082      	sub	sp, #8
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
 8001242:	0008      	movs	r0, r1
 8001244:	0011      	movs	r1, r2
 8001246:	1cbb      	adds	r3, r7, #2
 8001248:	1c02      	adds	r2, r0, #0
 800124a:	801a      	strh	r2, [r3, #0]
 800124c:	1c7b      	adds	r3, r7, #1
 800124e:	1c0a      	adds	r2, r1, #0
 8001250:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001252:	1c7b      	adds	r3, r7, #1
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d004      	beq.n	8001264 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800125a:	1cbb      	adds	r3, r7, #2
 800125c:	881a      	ldrh	r2, [r3, #0]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001262:	e003      	b.n	800126c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001264:	1cbb      	adds	r3, r7, #2
 8001266:	881a      	ldrh	r2, [r3, #0]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800126c:	46c0      	nop			@ (mov r8, r8)
 800126e:	46bd      	mov	sp, r7
 8001270:	b002      	add	sp, #8
 8001272:	bd80      	pop	{r7, pc}

08001274 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b086      	sub	sp, #24
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d101      	bne.n	8001286 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	e1d0      	b.n	8001628 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	2201      	movs	r2, #1
 800128c:	4013      	ands	r3, r2
 800128e:	d100      	bne.n	8001292 <HAL_RCC_OscConfig+0x1e>
 8001290:	e069      	b.n	8001366 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001292:	4bc8      	ldr	r3, [pc, #800]	@ (80015b4 <HAL_RCC_OscConfig+0x340>)
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	2238      	movs	r2, #56	@ 0x38
 8001298:	4013      	ands	r3, r2
 800129a:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	2b08      	cmp	r3, #8
 80012a0:	d105      	bne.n	80012ae <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d15d      	bne.n	8001366 <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e1bc      	b.n	8001628 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	685a      	ldr	r2, [r3, #4]
 80012b2:	2380      	movs	r3, #128	@ 0x80
 80012b4:	025b      	lsls	r3, r3, #9
 80012b6:	429a      	cmp	r2, r3
 80012b8:	d107      	bne.n	80012ca <HAL_RCC_OscConfig+0x56>
 80012ba:	4bbe      	ldr	r3, [pc, #760]	@ (80015b4 <HAL_RCC_OscConfig+0x340>)
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	4bbd      	ldr	r3, [pc, #756]	@ (80015b4 <HAL_RCC_OscConfig+0x340>)
 80012c0:	2180      	movs	r1, #128	@ 0x80
 80012c2:	0249      	lsls	r1, r1, #9
 80012c4:	430a      	orrs	r2, r1
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	e020      	b.n	800130c <HAL_RCC_OscConfig+0x98>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	685a      	ldr	r2, [r3, #4]
 80012ce:	23a0      	movs	r3, #160	@ 0xa0
 80012d0:	02db      	lsls	r3, r3, #11
 80012d2:	429a      	cmp	r2, r3
 80012d4:	d10e      	bne.n	80012f4 <HAL_RCC_OscConfig+0x80>
 80012d6:	4bb7      	ldr	r3, [pc, #732]	@ (80015b4 <HAL_RCC_OscConfig+0x340>)
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	4bb6      	ldr	r3, [pc, #728]	@ (80015b4 <HAL_RCC_OscConfig+0x340>)
 80012dc:	2180      	movs	r1, #128	@ 0x80
 80012de:	02c9      	lsls	r1, r1, #11
 80012e0:	430a      	orrs	r2, r1
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	4bb3      	ldr	r3, [pc, #716]	@ (80015b4 <HAL_RCC_OscConfig+0x340>)
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	4bb2      	ldr	r3, [pc, #712]	@ (80015b4 <HAL_RCC_OscConfig+0x340>)
 80012ea:	2180      	movs	r1, #128	@ 0x80
 80012ec:	0249      	lsls	r1, r1, #9
 80012ee:	430a      	orrs	r2, r1
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	e00b      	b.n	800130c <HAL_RCC_OscConfig+0x98>
 80012f4:	4baf      	ldr	r3, [pc, #700]	@ (80015b4 <HAL_RCC_OscConfig+0x340>)
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	4bae      	ldr	r3, [pc, #696]	@ (80015b4 <HAL_RCC_OscConfig+0x340>)
 80012fa:	49af      	ldr	r1, [pc, #700]	@ (80015b8 <HAL_RCC_OscConfig+0x344>)
 80012fc:	400a      	ands	r2, r1
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	4bac      	ldr	r3, [pc, #688]	@ (80015b4 <HAL_RCC_OscConfig+0x340>)
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	4bab      	ldr	r3, [pc, #684]	@ (80015b4 <HAL_RCC_OscConfig+0x340>)
 8001306:	49ad      	ldr	r1, [pc, #692]	@ (80015bc <HAL_RCC_OscConfig+0x348>)
 8001308:	400a      	ands	r2, r1
 800130a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d014      	beq.n	800133e <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001314:	f7ff fc1a 	bl	8000b4c <HAL_GetTick>
 8001318:	0003      	movs	r3, r0
 800131a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800131c:	e008      	b.n	8001330 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800131e:	f7ff fc15 	bl	8000b4c <HAL_GetTick>
 8001322:	0002      	movs	r2, r0
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	1ad3      	subs	r3, r2, r3
 8001328:	2b64      	cmp	r3, #100	@ 0x64
 800132a:	d901      	bls.n	8001330 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 800132c:	2303      	movs	r3, #3
 800132e:	e17b      	b.n	8001628 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001330:	4ba0      	ldr	r3, [pc, #640]	@ (80015b4 <HAL_RCC_OscConfig+0x340>)
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	2380      	movs	r3, #128	@ 0x80
 8001336:	029b      	lsls	r3, r3, #10
 8001338:	4013      	ands	r3, r2
 800133a:	d0f0      	beq.n	800131e <HAL_RCC_OscConfig+0xaa>
 800133c:	e013      	b.n	8001366 <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800133e:	f7ff fc05 	bl	8000b4c <HAL_GetTick>
 8001342:	0003      	movs	r3, r0
 8001344:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001346:	e008      	b.n	800135a <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001348:	f7ff fc00 	bl	8000b4c <HAL_GetTick>
 800134c:	0002      	movs	r2, r0
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	2b64      	cmp	r3, #100	@ 0x64
 8001354:	d901      	bls.n	800135a <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8001356:	2303      	movs	r3, #3
 8001358:	e166      	b.n	8001628 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800135a:	4b96      	ldr	r3, [pc, #600]	@ (80015b4 <HAL_RCC_OscConfig+0x340>)
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	2380      	movs	r3, #128	@ 0x80
 8001360:	029b      	lsls	r3, r3, #10
 8001362:	4013      	ands	r3, r2
 8001364:	d1f0      	bne.n	8001348 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2202      	movs	r2, #2
 800136c:	4013      	ands	r3, r2
 800136e:	d100      	bne.n	8001372 <HAL_RCC_OscConfig+0xfe>
 8001370:	e086      	b.n	8001480 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001372:	4b90      	ldr	r3, [pc, #576]	@ (80015b4 <HAL_RCC_OscConfig+0x340>)
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	2238      	movs	r2, #56	@ 0x38
 8001378:	4013      	ands	r3, r2
 800137a:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d12f      	bne.n	80013e2 <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	68db      	ldr	r3, [r3, #12]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d101      	bne.n	800138e <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e14c      	b.n	8001628 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800138e:	4b89      	ldr	r3, [pc, #548]	@ (80015b4 <HAL_RCC_OscConfig+0x340>)
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	4a8b      	ldr	r2, [pc, #556]	@ (80015c0 <HAL_RCC_OscConfig+0x34c>)
 8001394:	4013      	ands	r3, r2
 8001396:	0019      	movs	r1, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	695b      	ldr	r3, [r3, #20]
 800139c:	021a      	lsls	r2, r3, #8
 800139e:	4b85      	ldr	r3, [pc, #532]	@ (80015b4 <HAL_RCC_OscConfig+0x340>)
 80013a0:	430a      	orrs	r2, r1
 80013a2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d112      	bne.n	80013d0 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80013aa:	4b82      	ldr	r3, [pc, #520]	@ (80015b4 <HAL_RCC_OscConfig+0x340>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a85      	ldr	r2, [pc, #532]	@ (80015c4 <HAL_RCC_OscConfig+0x350>)
 80013b0:	4013      	ands	r3, r2
 80013b2:	0019      	movs	r1, r3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	691a      	ldr	r2, [r3, #16]
 80013b8:	4b7e      	ldr	r3, [pc, #504]	@ (80015b4 <HAL_RCC_OscConfig+0x340>)
 80013ba:	430a      	orrs	r2, r1
 80013bc:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80013be:	4b7d      	ldr	r3, [pc, #500]	@ (80015b4 <HAL_RCC_OscConfig+0x340>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	0adb      	lsrs	r3, r3, #11
 80013c4:	2207      	movs	r2, #7
 80013c6:	4013      	ands	r3, r2
 80013c8:	4a7f      	ldr	r2, [pc, #508]	@ (80015c8 <HAL_RCC_OscConfig+0x354>)
 80013ca:	40da      	lsrs	r2, r3
 80013cc:	4b7f      	ldr	r3, [pc, #508]	@ (80015cc <HAL_RCC_OscConfig+0x358>)
 80013ce:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80013d0:	4b7f      	ldr	r3, [pc, #508]	@ (80015d0 <HAL_RCC_OscConfig+0x35c>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	0018      	movs	r0, r3
 80013d6:	f7ff fb5d 	bl	8000a94 <HAL_InitTick>
 80013da:	1e03      	subs	r3, r0, #0
 80013dc:	d050      	beq.n	8001480 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e122      	b.n	8001628 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	68db      	ldr	r3, [r3, #12]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d030      	beq.n	800144c <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80013ea:	4b72      	ldr	r3, [pc, #456]	@ (80015b4 <HAL_RCC_OscConfig+0x340>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a75      	ldr	r2, [pc, #468]	@ (80015c4 <HAL_RCC_OscConfig+0x350>)
 80013f0:	4013      	ands	r3, r2
 80013f2:	0019      	movs	r1, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	691a      	ldr	r2, [r3, #16]
 80013f8:	4b6e      	ldr	r3, [pc, #440]	@ (80015b4 <HAL_RCC_OscConfig+0x340>)
 80013fa:	430a      	orrs	r2, r1
 80013fc:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 80013fe:	4b6d      	ldr	r3, [pc, #436]	@ (80015b4 <HAL_RCC_OscConfig+0x340>)
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	4b6c      	ldr	r3, [pc, #432]	@ (80015b4 <HAL_RCC_OscConfig+0x340>)
 8001404:	2180      	movs	r1, #128	@ 0x80
 8001406:	0049      	lsls	r1, r1, #1
 8001408:	430a      	orrs	r2, r1
 800140a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800140c:	f7ff fb9e 	bl	8000b4c <HAL_GetTick>
 8001410:	0003      	movs	r3, r0
 8001412:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001414:	e008      	b.n	8001428 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001416:	f7ff fb99 	bl	8000b4c <HAL_GetTick>
 800141a:	0002      	movs	r2, r0
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	2b02      	cmp	r3, #2
 8001422:	d901      	bls.n	8001428 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001424:	2303      	movs	r3, #3
 8001426:	e0ff      	b.n	8001628 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001428:	4b62      	ldr	r3, [pc, #392]	@ (80015b4 <HAL_RCC_OscConfig+0x340>)
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	2380      	movs	r3, #128	@ 0x80
 800142e:	00db      	lsls	r3, r3, #3
 8001430:	4013      	ands	r3, r2
 8001432:	d0f0      	beq.n	8001416 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001434:	4b5f      	ldr	r3, [pc, #380]	@ (80015b4 <HAL_RCC_OscConfig+0x340>)
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	4a61      	ldr	r2, [pc, #388]	@ (80015c0 <HAL_RCC_OscConfig+0x34c>)
 800143a:	4013      	ands	r3, r2
 800143c:	0019      	movs	r1, r3
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	695b      	ldr	r3, [r3, #20]
 8001442:	021a      	lsls	r2, r3, #8
 8001444:	4b5b      	ldr	r3, [pc, #364]	@ (80015b4 <HAL_RCC_OscConfig+0x340>)
 8001446:	430a      	orrs	r2, r1
 8001448:	605a      	str	r2, [r3, #4]
 800144a:	e019      	b.n	8001480 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 800144c:	4b59      	ldr	r3, [pc, #356]	@ (80015b4 <HAL_RCC_OscConfig+0x340>)
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	4b58      	ldr	r3, [pc, #352]	@ (80015b4 <HAL_RCC_OscConfig+0x340>)
 8001452:	4960      	ldr	r1, [pc, #384]	@ (80015d4 <HAL_RCC_OscConfig+0x360>)
 8001454:	400a      	ands	r2, r1
 8001456:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001458:	f7ff fb78 	bl	8000b4c <HAL_GetTick>
 800145c:	0003      	movs	r3, r0
 800145e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001460:	e008      	b.n	8001474 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001462:	f7ff fb73 	bl	8000b4c <HAL_GetTick>
 8001466:	0002      	movs	r2, r0
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	1ad3      	subs	r3, r2, r3
 800146c:	2b02      	cmp	r3, #2
 800146e:	d901      	bls.n	8001474 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001470:	2303      	movs	r3, #3
 8001472:	e0d9      	b.n	8001628 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001474:	4b4f      	ldr	r3, [pc, #316]	@ (80015b4 <HAL_RCC_OscConfig+0x340>)
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	2380      	movs	r3, #128	@ 0x80
 800147a:	00db      	lsls	r3, r3, #3
 800147c:	4013      	ands	r3, r2
 800147e:	d1f0      	bne.n	8001462 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2208      	movs	r2, #8
 8001486:	4013      	ands	r3, r2
 8001488:	d042      	beq.n	8001510 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800148a:	4b4a      	ldr	r3, [pc, #296]	@ (80015b4 <HAL_RCC_OscConfig+0x340>)
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	2238      	movs	r2, #56	@ 0x38
 8001490:	4013      	ands	r3, r2
 8001492:	2b18      	cmp	r3, #24
 8001494:	d105      	bne.n	80014a2 <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	699b      	ldr	r3, [r3, #24]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d138      	bne.n	8001510 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e0c2      	b.n	8001628 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	699b      	ldr	r3, [r3, #24]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d019      	beq.n	80014de <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80014aa:	4b42      	ldr	r3, [pc, #264]	@ (80015b4 <HAL_RCC_OscConfig+0x340>)
 80014ac:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80014ae:	4b41      	ldr	r3, [pc, #260]	@ (80015b4 <HAL_RCC_OscConfig+0x340>)
 80014b0:	2101      	movs	r1, #1
 80014b2:	430a      	orrs	r2, r1
 80014b4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014b6:	f7ff fb49 	bl	8000b4c <HAL_GetTick>
 80014ba:	0003      	movs	r3, r0
 80014bc:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80014be:	e008      	b.n	80014d2 <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80014c0:	f7ff fb44 	bl	8000b4c <HAL_GetTick>
 80014c4:	0002      	movs	r2, r0
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d901      	bls.n	80014d2 <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 80014ce:	2303      	movs	r3, #3
 80014d0:	e0aa      	b.n	8001628 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80014d2:	4b38      	ldr	r3, [pc, #224]	@ (80015b4 <HAL_RCC_OscConfig+0x340>)
 80014d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014d6:	2202      	movs	r2, #2
 80014d8:	4013      	ands	r3, r2
 80014da:	d0f1      	beq.n	80014c0 <HAL_RCC_OscConfig+0x24c>
 80014dc:	e018      	b.n	8001510 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80014de:	4b35      	ldr	r3, [pc, #212]	@ (80015b4 <HAL_RCC_OscConfig+0x340>)
 80014e0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80014e2:	4b34      	ldr	r3, [pc, #208]	@ (80015b4 <HAL_RCC_OscConfig+0x340>)
 80014e4:	2101      	movs	r1, #1
 80014e6:	438a      	bics	r2, r1
 80014e8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ea:	f7ff fb2f 	bl	8000b4c <HAL_GetTick>
 80014ee:	0003      	movs	r3, r0
 80014f0:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 80014f2:	e008      	b.n	8001506 <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80014f4:	f7ff fb2a 	bl	8000b4c <HAL_GetTick>
 80014f8:	0002      	movs	r2, r0
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	2b02      	cmp	r3, #2
 8001500:	d901      	bls.n	8001506 <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e090      	b.n	8001628 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8001506:	4b2b      	ldr	r3, [pc, #172]	@ (80015b4 <HAL_RCC_OscConfig+0x340>)
 8001508:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800150a:	2202      	movs	r2, #2
 800150c:	4013      	ands	r3, r2
 800150e:	d1f1      	bne.n	80014f4 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2204      	movs	r2, #4
 8001516:	4013      	ands	r3, r2
 8001518:	d100      	bne.n	800151c <HAL_RCC_OscConfig+0x2a8>
 800151a:	e084      	b.n	8001626 <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 800151c:	230f      	movs	r3, #15
 800151e:	18fb      	adds	r3, r7, r3
 8001520:	2200      	movs	r2, #0
 8001522:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001524:	4b23      	ldr	r3, [pc, #140]	@ (80015b4 <HAL_RCC_OscConfig+0x340>)
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	2238      	movs	r2, #56	@ 0x38
 800152a:	4013      	ands	r3, r2
 800152c:	2b20      	cmp	r3, #32
 800152e:	d106      	bne.n	800153e <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d000      	beq.n	800153a <HAL_RCC_OscConfig+0x2c6>
 8001538:	e075      	b.n	8001626 <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e074      	b.n	8001628 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	2b01      	cmp	r3, #1
 8001544:	d106      	bne.n	8001554 <HAL_RCC_OscConfig+0x2e0>
 8001546:	4b1b      	ldr	r3, [pc, #108]	@ (80015b4 <HAL_RCC_OscConfig+0x340>)
 8001548:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800154a:	4b1a      	ldr	r3, [pc, #104]	@ (80015b4 <HAL_RCC_OscConfig+0x340>)
 800154c:	2101      	movs	r1, #1
 800154e:	430a      	orrs	r2, r1
 8001550:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001552:	e01c      	b.n	800158e <HAL_RCC_OscConfig+0x31a>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	2b05      	cmp	r3, #5
 800155a:	d10c      	bne.n	8001576 <HAL_RCC_OscConfig+0x302>
 800155c:	4b15      	ldr	r3, [pc, #84]	@ (80015b4 <HAL_RCC_OscConfig+0x340>)
 800155e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001560:	4b14      	ldr	r3, [pc, #80]	@ (80015b4 <HAL_RCC_OscConfig+0x340>)
 8001562:	2104      	movs	r1, #4
 8001564:	430a      	orrs	r2, r1
 8001566:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001568:	4b12      	ldr	r3, [pc, #72]	@ (80015b4 <HAL_RCC_OscConfig+0x340>)
 800156a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800156c:	4b11      	ldr	r3, [pc, #68]	@ (80015b4 <HAL_RCC_OscConfig+0x340>)
 800156e:	2101      	movs	r1, #1
 8001570:	430a      	orrs	r2, r1
 8001572:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001574:	e00b      	b.n	800158e <HAL_RCC_OscConfig+0x31a>
 8001576:	4b0f      	ldr	r3, [pc, #60]	@ (80015b4 <HAL_RCC_OscConfig+0x340>)
 8001578:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800157a:	4b0e      	ldr	r3, [pc, #56]	@ (80015b4 <HAL_RCC_OscConfig+0x340>)
 800157c:	2101      	movs	r1, #1
 800157e:	438a      	bics	r2, r1
 8001580:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001582:	4b0c      	ldr	r3, [pc, #48]	@ (80015b4 <HAL_RCC_OscConfig+0x340>)
 8001584:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001586:	4b0b      	ldr	r3, [pc, #44]	@ (80015b4 <HAL_RCC_OscConfig+0x340>)
 8001588:	2104      	movs	r1, #4
 800158a:	438a      	bics	r2, r1
 800158c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d028      	beq.n	80015e8 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001596:	f7ff fad9 	bl	8000b4c <HAL_GetTick>
 800159a:	0003      	movs	r3, r0
 800159c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800159e:	e01d      	b.n	80015dc <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015a0:	f7ff fad4 	bl	8000b4c <HAL_GetTick>
 80015a4:	0002      	movs	r2, r0
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	4a0b      	ldr	r2, [pc, #44]	@ (80015d8 <HAL_RCC_OscConfig+0x364>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d915      	bls.n	80015dc <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 80015b0:	2303      	movs	r3, #3
 80015b2:	e039      	b.n	8001628 <HAL_RCC_OscConfig+0x3b4>
 80015b4:	40021000 	.word	0x40021000
 80015b8:	fffeffff 	.word	0xfffeffff
 80015bc:	fffbffff 	.word	0xfffbffff
 80015c0:	ffff80ff 	.word	0xffff80ff
 80015c4:	ffffc7ff 	.word	0xffffc7ff
 80015c8:	02dc6c00 	.word	0x02dc6c00
 80015cc:	20000000 	.word	0x20000000
 80015d0:	20000004 	.word	0x20000004
 80015d4:	fffffeff 	.word	0xfffffeff
 80015d8:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80015dc:	4b14      	ldr	r3, [pc, #80]	@ (8001630 <HAL_RCC_OscConfig+0x3bc>)
 80015de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015e0:	2202      	movs	r2, #2
 80015e2:	4013      	ands	r3, r2
 80015e4:	d0dc      	beq.n	80015a0 <HAL_RCC_OscConfig+0x32c>
 80015e6:	e013      	b.n	8001610 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e8:	f7ff fab0 	bl	8000b4c <HAL_GetTick>
 80015ec:	0003      	movs	r3, r0
 80015ee:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 80015f0:	e009      	b.n	8001606 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015f2:	f7ff faab 	bl	8000b4c <HAL_GetTick>
 80015f6:	0002      	movs	r2, r0
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001634 <HAL_RCC_OscConfig+0x3c0>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d901      	bls.n	8001606 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e010      	b.n	8001628 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001606:	4b0a      	ldr	r3, [pc, #40]	@ (8001630 <HAL_RCC_OscConfig+0x3bc>)
 8001608:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800160a:	2202      	movs	r2, #2
 800160c:	4013      	ands	r3, r2
 800160e:	d1f0      	bne.n	80015f2 <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001610:	230f      	movs	r3, #15
 8001612:	18fb      	adds	r3, r7, r3
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	2b01      	cmp	r3, #1
 8001618:	d105      	bne.n	8001626 <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800161a:	4b05      	ldr	r3, [pc, #20]	@ (8001630 <HAL_RCC_OscConfig+0x3bc>)
 800161c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800161e:	4b04      	ldr	r3, [pc, #16]	@ (8001630 <HAL_RCC_OscConfig+0x3bc>)
 8001620:	4905      	ldr	r1, [pc, #20]	@ (8001638 <HAL_RCC_OscConfig+0x3c4>)
 8001622:	400a      	ands	r2, r1
 8001624:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 8001626:	2300      	movs	r3, #0
}
 8001628:	0018      	movs	r0, r3
 800162a:	46bd      	mov	sp, r7
 800162c:	b006      	add	sp, #24
 800162e:	bd80      	pop	{r7, pc}
 8001630:	40021000 	.word	0x40021000
 8001634:	00001388 	.word	0x00001388
 8001638:	efffffff 	.word	0xefffffff

0800163c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d101      	bne.n	8001650 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	e0e9      	b.n	8001824 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001650:	4b76      	ldr	r3, [pc, #472]	@ (800182c <HAL_RCC_ClockConfig+0x1f0>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	2207      	movs	r2, #7
 8001656:	4013      	ands	r3, r2
 8001658:	683a      	ldr	r2, [r7, #0]
 800165a:	429a      	cmp	r2, r3
 800165c:	d91e      	bls.n	800169c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800165e:	4b73      	ldr	r3, [pc, #460]	@ (800182c <HAL_RCC_ClockConfig+0x1f0>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	2207      	movs	r2, #7
 8001664:	4393      	bics	r3, r2
 8001666:	0019      	movs	r1, r3
 8001668:	4b70      	ldr	r3, [pc, #448]	@ (800182c <HAL_RCC_ClockConfig+0x1f0>)
 800166a:	683a      	ldr	r2, [r7, #0]
 800166c:	430a      	orrs	r2, r1
 800166e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001670:	f7ff fa6c 	bl	8000b4c <HAL_GetTick>
 8001674:	0003      	movs	r3, r0
 8001676:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001678:	e009      	b.n	800168e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800167a:	f7ff fa67 	bl	8000b4c <HAL_GetTick>
 800167e:	0002      	movs	r2, r0
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	4a6a      	ldr	r2, [pc, #424]	@ (8001830 <HAL_RCC_ClockConfig+0x1f4>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d901      	bls.n	800168e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e0ca      	b.n	8001824 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800168e:	4b67      	ldr	r3, [pc, #412]	@ (800182c <HAL_RCC_ClockConfig+0x1f0>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	2207      	movs	r2, #7
 8001694:	4013      	ands	r3, r2
 8001696:	683a      	ldr	r2, [r7, #0]
 8001698:	429a      	cmp	r2, r3
 800169a:	d1ee      	bne.n	800167a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2202      	movs	r2, #2
 80016a2:	4013      	ands	r3, r2
 80016a4:	d017      	beq.n	80016d6 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	2204      	movs	r2, #4
 80016ac:	4013      	ands	r3, r2
 80016ae:	d008      	beq.n	80016c2 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80016b0:	4b60      	ldr	r3, [pc, #384]	@ (8001834 <HAL_RCC_ClockConfig+0x1f8>)
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	4a60      	ldr	r2, [pc, #384]	@ (8001838 <HAL_RCC_ClockConfig+0x1fc>)
 80016b6:	401a      	ands	r2, r3
 80016b8:	4b5e      	ldr	r3, [pc, #376]	@ (8001834 <HAL_RCC_ClockConfig+0x1f8>)
 80016ba:	21b0      	movs	r1, #176	@ 0xb0
 80016bc:	0109      	lsls	r1, r1, #4
 80016be:	430a      	orrs	r2, r1
 80016c0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016c2:	4b5c      	ldr	r3, [pc, #368]	@ (8001834 <HAL_RCC_ClockConfig+0x1f8>)
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	4a5d      	ldr	r2, [pc, #372]	@ (800183c <HAL_RCC_ClockConfig+0x200>)
 80016c8:	4013      	ands	r3, r2
 80016ca:	0019      	movs	r1, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	68da      	ldr	r2, [r3, #12]
 80016d0:	4b58      	ldr	r3, [pc, #352]	@ (8001834 <HAL_RCC_ClockConfig+0x1f8>)
 80016d2:	430a      	orrs	r2, r1
 80016d4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	2201      	movs	r2, #1
 80016dc:	4013      	ands	r3, r2
 80016de:	d055      	beq.n	800178c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 80016e0:	4b54      	ldr	r3, [pc, #336]	@ (8001834 <HAL_RCC_ClockConfig+0x1f8>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	221c      	movs	r2, #28
 80016e6:	4393      	bics	r3, r2
 80016e8:	0019      	movs	r1, r3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	689a      	ldr	r2, [r3, #8]
 80016ee:	4b51      	ldr	r3, [pc, #324]	@ (8001834 <HAL_RCC_ClockConfig+0x1f8>)
 80016f0:	430a      	orrs	r2, r1
 80016f2:	601a      	str	r2, [r3, #0]
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d107      	bne.n	800170c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016fc:	4b4d      	ldr	r3, [pc, #308]	@ (8001834 <HAL_RCC_ClockConfig+0x1f8>)
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	2380      	movs	r3, #128	@ 0x80
 8001702:	029b      	lsls	r3, r3, #10
 8001704:	4013      	ands	r3, r2
 8001706:	d11f      	bne.n	8001748 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	e08b      	b.n	8001824 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d107      	bne.n	8001724 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001714:	4b47      	ldr	r3, [pc, #284]	@ (8001834 <HAL_RCC_ClockConfig+0x1f8>)
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	2380      	movs	r3, #128	@ 0x80
 800171a:	00db      	lsls	r3, r3, #3
 800171c:	4013      	ands	r3, r2
 800171e:	d113      	bne.n	8001748 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e07f      	b.n	8001824 <HAL_RCC_ClockConfig+0x1e8>
        return HAL_ERROR;
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	2b03      	cmp	r3, #3
 800172a:	d106      	bne.n	800173a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800172c:	4b41      	ldr	r3, [pc, #260]	@ (8001834 <HAL_RCC_ClockConfig+0x1f8>)
 800172e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001730:	2202      	movs	r2, #2
 8001732:	4013      	ands	r3, r2
 8001734:	d108      	bne.n	8001748 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e074      	b.n	8001824 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800173a:	4b3e      	ldr	r3, [pc, #248]	@ (8001834 <HAL_RCC_ClockConfig+0x1f8>)
 800173c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800173e:	2202      	movs	r2, #2
 8001740:	4013      	ands	r3, r2
 8001742:	d101      	bne.n	8001748 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e06d      	b.n	8001824 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001748:	4b3a      	ldr	r3, [pc, #232]	@ (8001834 <HAL_RCC_ClockConfig+0x1f8>)
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	2207      	movs	r2, #7
 800174e:	4393      	bics	r3, r2
 8001750:	0019      	movs	r1, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	685a      	ldr	r2, [r3, #4]
 8001756:	4b37      	ldr	r3, [pc, #220]	@ (8001834 <HAL_RCC_ClockConfig+0x1f8>)
 8001758:	430a      	orrs	r2, r1
 800175a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800175c:	f7ff f9f6 	bl	8000b4c <HAL_GetTick>
 8001760:	0003      	movs	r3, r0
 8001762:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001764:	e009      	b.n	800177a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001766:	f7ff f9f1 	bl	8000b4c <HAL_GetTick>
 800176a:	0002      	movs	r2, r0
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	4a2f      	ldr	r2, [pc, #188]	@ (8001830 <HAL_RCC_ClockConfig+0x1f4>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d901      	bls.n	800177a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e054      	b.n	8001824 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800177a:	4b2e      	ldr	r3, [pc, #184]	@ (8001834 <HAL_RCC_ClockConfig+0x1f8>)
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	2238      	movs	r2, #56	@ 0x38
 8001780:	401a      	ands	r2, r3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	00db      	lsls	r3, r3, #3
 8001788:	429a      	cmp	r2, r3
 800178a:	d1ec      	bne.n	8001766 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800178c:	4b27      	ldr	r3, [pc, #156]	@ (800182c <HAL_RCC_ClockConfig+0x1f0>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2207      	movs	r2, #7
 8001792:	4013      	ands	r3, r2
 8001794:	683a      	ldr	r2, [r7, #0]
 8001796:	429a      	cmp	r2, r3
 8001798:	d21e      	bcs.n	80017d8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800179a:	4b24      	ldr	r3, [pc, #144]	@ (800182c <HAL_RCC_ClockConfig+0x1f0>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	2207      	movs	r2, #7
 80017a0:	4393      	bics	r3, r2
 80017a2:	0019      	movs	r1, r3
 80017a4:	4b21      	ldr	r3, [pc, #132]	@ (800182c <HAL_RCC_ClockConfig+0x1f0>)
 80017a6:	683a      	ldr	r2, [r7, #0]
 80017a8:	430a      	orrs	r2, r1
 80017aa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80017ac:	f7ff f9ce 	bl	8000b4c <HAL_GetTick>
 80017b0:	0003      	movs	r3, r0
 80017b2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80017b4:	e009      	b.n	80017ca <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80017b6:	f7ff f9c9 	bl	8000b4c <HAL_GetTick>
 80017ba:	0002      	movs	r2, r0
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	4a1b      	ldr	r2, [pc, #108]	@ (8001830 <HAL_RCC_ClockConfig+0x1f4>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d901      	bls.n	80017ca <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e02c      	b.n	8001824 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80017ca:	4b18      	ldr	r3, [pc, #96]	@ (800182c <HAL_RCC_ClockConfig+0x1f0>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2207      	movs	r2, #7
 80017d0:	4013      	ands	r3, r2
 80017d2:	683a      	ldr	r2, [r7, #0]
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d1ee      	bne.n	80017b6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2204      	movs	r2, #4
 80017de:	4013      	ands	r3, r2
 80017e0:	d009      	beq.n	80017f6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80017e2:	4b14      	ldr	r3, [pc, #80]	@ (8001834 <HAL_RCC_ClockConfig+0x1f8>)
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	4a16      	ldr	r2, [pc, #88]	@ (8001840 <HAL_RCC_ClockConfig+0x204>)
 80017e8:	4013      	ands	r3, r2
 80017ea:	0019      	movs	r1, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	691a      	ldr	r2, [r3, #16]
 80017f0:	4b10      	ldr	r3, [pc, #64]	@ (8001834 <HAL_RCC_ClockConfig+0x1f8>)
 80017f2:	430a      	orrs	r2, r1
 80017f4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80017f6:	f000 f82b 	bl	8001850 <HAL_RCC_GetSysClockFreq>
 80017fa:	0001      	movs	r1, r0
 80017fc:	4b0d      	ldr	r3, [pc, #52]	@ (8001834 <HAL_RCC_ClockConfig+0x1f8>)
 80017fe:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001800:	0a1b      	lsrs	r3, r3, #8
 8001802:	220f      	movs	r2, #15
 8001804:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001806:	4b0f      	ldr	r3, [pc, #60]	@ (8001844 <HAL_RCC_ClockConfig+0x208>)
 8001808:	0092      	lsls	r2, r2, #2
 800180a:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800180c:	221f      	movs	r2, #31
 800180e:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001810:	000a      	movs	r2, r1
 8001812:	40da      	lsrs	r2, r3
 8001814:	4b0c      	ldr	r3, [pc, #48]	@ (8001848 <HAL_RCC_ClockConfig+0x20c>)
 8001816:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001818:	4b0c      	ldr	r3, [pc, #48]	@ (800184c <HAL_RCC_ClockConfig+0x210>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	0018      	movs	r0, r3
 800181e:	f7ff f939 	bl	8000a94 <HAL_InitTick>
 8001822:	0003      	movs	r3, r0
}
 8001824:	0018      	movs	r0, r3
 8001826:	46bd      	mov	sp, r7
 8001828:	b004      	add	sp, #16
 800182a:	bd80      	pop	{r7, pc}
 800182c:	40022000 	.word	0x40022000
 8001830:	00001388 	.word	0x00001388
 8001834:	40021000 	.word	0x40021000
 8001838:	ffff84ff 	.word	0xffff84ff
 800183c:	fffff0ff 	.word	0xfffff0ff
 8001840:	ffff8fff 	.word	0xffff8fff
 8001844:	080030e0 	.word	0x080030e0
 8001848:	20000000 	.word	0x20000000
 800184c:	20000004 	.word	0x20000004

08001850 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
 8001856:	4b23      	ldr	r3, [pc, #140]	@ (80018e4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	089b      	lsrs	r3, r3, #2
 800185c:	2207      	movs	r2, #7
 800185e:	4013      	ands	r3, r2
 8001860:	3301      	adds	r3, #1
 8001862:	60bb      	str	r3, [r7, #8]
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001864:	4b1f      	ldr	r3, [pc, #124]	@ (80018e4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	2238      	movs	r2, #56	@ 0x38
 800186a:	4013      	ands	r3, r2
 800186c:	d10f      	bne.n	800188e <HAL_RCC_GetSysClockFreq+0x3e>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800186e:	4b1d      	ldr	r3, [pc, #116]	@ (80018e4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	0adb      	lsrs	r3, r3, #11
 8001874:	2207      	movs	r2, #7
 8001876:	4013      	ands	r3, r2
 8001878:	2201      	movs	r2, #1
 800187a:	409a      	lsls	r2, r3
 800187c:	0013      	movs	r3, r2
 800187e:	607b      	str	r3, [r7, #4]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001880:	6879      	ldr	r1, [r7, #4]
 8001882:	4819      	ldr	r0, [pc, #100]	@ (80018e8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001884:	f7fe fc40 	bl	8000108 <__udivsi3>
 8001888:	0003      	movs	r3, r0
 800188a:	60fb      	str	r3, [r7, #12]
 800188c:	e01e      	b.n	80018cc <HAL_RCC_GetSysClockFreq+0x7c>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800188e:	4b15      	ldr	r3, [pc, #84]	@ (80018e4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	2238      	movs	r2, #56	@ 0x38
 8001894:	4013      	ands	r3, r2
 8001896:	2b08      	cmp	r3, #8
 8001898:	d102      	bne.n	80018a0 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800189a:	4b14      	ldr	r3, [pc, #80]	@ (80018ec <HAL_RCC_GetSysClockFreq+0x9c>)
 800189c:	60fb      	str	r3, [r7, #12]
 800189e:	e015      	b.n	80018cc <HAL_RCC_GetSysClockFreq+0x7c>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80018a0:	4b10      	ldr	r3, [pc, #64]	@ (80018e4 <HAL_RCC_GetSysClockFreq+0x94>)
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	2238      	movs	r2, #56	@ 0x38
 80018a6:	4013      	ands	r3, r2
 80018a8:	2b20      	cmp	r3, #32
 80018aa:	d103      	bne.n	80018b4 <HAL_RCC_GetSysClockFreq+0x64>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80018ac:	2380      	movs	r3, #128	@ 0x80
 80018ae:	021b      	lsls	r3, r3, #8
 80018b0:	60fb      	str	r3, [r7, #12]
 80018b2:	e00b      	b.n	80018cc <HAL_RCC_GetSysClockFreq+0x7c>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80018b4:	4b0b      	ldr	r3, [pc, #44]	@ (80018e4 <HAL_RCC_GetSysClockFreq+0x94>)
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	2238      	movs	r2, #56	@ 0x38
 80018ba:	4013      	ands	r3, r2
 80018bc:	2b18      	cmp	r3, #24
 80018be:	d103      	bne.n	80018c8 <HAL_RCC_GetSysClockFreq+0x78>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80018c0:	23fa      	movs	r3, #250	@ 0xfa
 80018c2:	01db      	lsls	r3, r3, #7
 80018c4:	60fb      	str	r3, [r7, #12]
 80018c6:	e001      	b.n	80018cc <HAL_RCC_GetSysClockFreq+0x7c>
    sysclockfreq = HSI48_VALUE;
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 80018c8:	2300      	movs	r3, #0
 80018ca:	60fb      	str	r3, [r7, #12]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
 80018cc:	68b9      	ldr	r1, [r7, #8]
 80018ce:	68f8      	ldr	r0, [r7, #12]
 80018d0:	f7fe fc1a 	bl	8000108 <__udivsi3>
 80018d4:	0003      	movs	r3, r0
 80018d6:	60fb      	str	r3, [r7, #12]
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 80018d8:	68fb      	ldr	r3, [r7, #12]
}
 80018da:	0018      	movs	r0, r3
 80018dc:	46bd      	mov	sp, r7
 80018de:	b004      	add	sp, #16
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	46c0      	nop			@ (mov r8, r8)
 80018e4:	40021000 	.word	0x40021000
 80018e8:	02dc6c00 	.word	0x02dc6c00
 80018ec:	007a1200 	.word	0x007a1200

080018f0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80018f4:	f7ff ffac 	bl	8001850 <HAL_RCC_GetSysClockFreq>
 80018f8:	0001      	movs	r1, r0
 80018fa:	4b09      	ldr	r3, [pc, #36]	@ (8001920 <HAL_RCC_GetHCLKFreq+0x30>)
 80018fc:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80018fe:	0a1b      	lsrs	r3, r3, #8
 8001900:	220f      	movs	r2, #15
 8001902:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001904:	4b07      	ldr	r3, [pc, #28]	@ (8001924 <HAL_RCC_GetHCLKFreq+0x34>)
 8001906:	0092      	lsls	r2, r2, #2
 8001908:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800190a:	221f      	movs	r2, #31
 800190c:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800190e:	000a      	movs	r2, r1
 8001910:	40da      	lsrs	r2, r3
 8001912:	4b05      	ldr	r3, [pc, #20]	@ (8001928 <HAL_RCC_GetHCLKFreq+0x38>)
 8001914:	601a      	str	r2, [r3, #0]
  return SystemCoreClock;
 8001916:	4b04      	ldr	r3, [pc, #16]	@ (8001928 <HAL_RCC_GetHCLKFreq+0x38>)
 8001918:	681b      	ldr	r3, [r3, #0]
}
 800191a:	0018      	movs	r0, r3
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	40021000 	.word	0x40021000
 8001924:	080030e0 	.word	0x080030e0
 8001928:	20000000 	.word	0x20000000

0800192c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8001930:	f7ff ffde 	bl	80018f0 <HAL_RCC_GetHCLKFreq>
 8001934:	0001      	movs	r1, r0
 8001936:	4b07      	ldr	r3, [pc, #28]	@ (8001954 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	0b1b      	lsrs	r3, r3, #12
 800193c:	2207      	movs	r2, #7
 800193e:	401a      	ands	r2, r3
 8001940:	4b05      	ldr	r3, [pc, #20]	@ (8001958 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8001942:	0092      	lsls	r2, r2, #2
 8001944:	58d3      	ldr	r3, [r2, r3]
 8001946:	221f      	movs	r2, #31
 8001948:	4013      	ands	r3, r2
 800194a:	40d9      	lsrs	r1, r3
 800194c:	000b      	movs	r3, r1
}
 800194e:	0018      	movs	r0, r3
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	40021000 	.word	0x40021000
 8001958:	08003120 	.word	0x08003120

0800195c <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b086      	sub	sp, #24
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001964:	2313      	movs	r3, #19
 8001966:	18fb      	adds	r3, r7, r3
 8001968:	2200      	movs	r2, #0
 800196a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800196c:	2312      	movs	r3, #18
 800196e:	18fb      	adds	r3, r7, r3
 8001970:	2200      	movs	r2, #0
 8001972:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2240      	movs	r2, #64	@ 0x40
 800197a:	4013      	ands	r3, r2
 800197c:	d100      	bne.n	8001980 <HAL_RCCEx_PeriphCLKConfig+0x24>
 800197e:	e079      	b.n	8001a74 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001980:	2011      	movs	r0, #17
 8001982:	183b      	adds	r3, r7, r0
 8001984:	2200      	movs	r2, #0
 8001986:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001988:	4b63      	ldr	r3, [pc, #396]	@ (8001b18 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800198a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800198c:	2380      	movs	r3, #128	@ 0x80
 800198e:	055b      	lsls	r3, r3, #21
 8001990:	4013      	ands	r3, r2
 8001992:	d110      	bne.n	80019b6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001994:	4b60      	ldr	r3, [pc, #384]	@ (8001b18 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001996:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001998:	4b5f      	ldr	r3, [pc, #380]	@ (8001b18 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800199a:	2180      	movs	r1, #128	@ 0x80
 800199c:	0549      	lsls	r1, r1, #21
 800199e:	430a      	orrs	r2, r1
 80019a0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80019a2:	4b5d      	ldr	r3, [pc, #372]	@ (8001b18 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80019a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80019a6:	2380      	movs	r3, #128	@ 0x80
 80019a8:	055b      	lsls	r3, r3, #21
 80019aa:	4013      	ands	r3, r2
 80019ac:	60bb      	str	r3, [r7, #8]
 80019ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019b0:	183b      	adds	r3, r7, r0
 80019b2:	2201      	movs	r2, #1
 80019b4:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 80019b6:	4b58      	ldr	r3, [pc, #352]	@ (8001b18 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80019b8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80019ba:	23c0      	movs	r3, #192	@ 0xc0
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	4013      	ands	r3, r2
 80019c0:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d019      	beq.n	80019fc <HAL_RCCEx_PeriphCLKConfig+0xa0>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	699b      	ldr	r3, [r3, #24]
 80019cc:	697a      	ldr	r2, [r7, #20]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d014      	beq.n	80019fc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 80019d2:	4b51      	ldr	r3, [pc, #324]	@ (8001b18 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80019d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019d6:	4a51      	ldr	r2, [pc, #324]	@ (8001b1c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80019d8:	4013      	ands	r3, r2
 80019da:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80019dc:	4b4e      	ldr	r3, [pc, #312]	@ (8001b18 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80019de:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80019e0:	4b4d      	ldr	r3, [pc, #308]	@ (8001b18 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80019e2:	2180      	movs	r1, #128	@ 0x80
 80019e4:	0249      	lsls	r1, r1, #9
 80019e6:	430a      	orrs	r2, r1
 80019e8:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 80019ea:	4b4b      	ldr	r3, [pc, #300]	@ (8001b18 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80019ec:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80019ee:	4b4a      	ldr	r3, [pc, #296]	@ (8001b18 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80019f0:	494b      	ldr	r1, [pc, #300]	@ (8001b20 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80019f2:	400a      	ands	r2, r1
 80019f4:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 80019f6:	4b48      	ldr	r3, [pc, #288]	@ (8001b18 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80019f8:	697a      	ldr	r2, [r7, #20]
 80019fa:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	2201      	movs	r2, #1
 8001a00:	4013      	ands	r3, r2
 8001a02:	d016      	beq.n	8001a32 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a04:	f7ff f8a2 	bl	8000b4c <HAL_GetTick>
 8001a08:	0003      	movs	r3, r0
 8001a0a:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001a0c:	e00c      	b.n	8001a28 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a0e:	f7ff f89d 	bl	8000b4c <HAL_GetTick>
 8001a12:	0002      	movs	r2, r0
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	4a42      	ldr	r2, [pc, #264]	@ (8001b24 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d904      	bls.n	8001a28 <HAL_RCCEx_PeriphCLKConfig+0xcc>
        {
          ret = HAL_TIMEOUT;
 8001a1e:	2313      	movs	r3, #19
 8001a20:	18fb      	adds	r3, r7, r3
 8001a22:	2203      	movs	r2, #3
 8001a24:	701a      	strb	r2, [r3, #0]
          break;
 8001a26:	e004      	b.n	8001a32 <HAL_RCCEx_PeriphCLKConfig+0xd6>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001a28:	4b3b      	ldr	r3, [pc, #236]	@ (8001b18 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001a2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a2c:	2202      	movs	r2, #2
 8001a2e:	4013      	ands	r3, r2
 8001a30:	d0ed      	beq.n	8001a0e <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    if (ret == HAL_OK)
 8001a32:	2313      	movs	r3, #19
 8001a34:	18fb      	adds	r3, r7, r3
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d10a      	bne.n	8001a52 <HAL_RCCEx_PeriphCLKConfig+0xf6>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001a3c:	4b36      	ldr	r3, [pc, #216]	@ (8001b18 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001a3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a40:	4a36      	ldr	r2, [pc, #216]	@ (8001b1c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001a42:	4013      	ands	r3, r2
 8001a44:	0019      	movs	r1, r3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	699a      	ldr	r2, [r3, #24]
 8001a4a:	4b33      	ldr	r3, [pc, #204]	@ (8001b18 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001a4c:	430a      	orrs	r2, r1
 8001a4e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001a50:	e005      	b.n	8001a5e <HAL_RCCEx_PeriphCLKConfig+0x102>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001a52:	2312      	movs	r3, #18
 8001a54:	18fb      	adds	r3, r7, r3
 8001a56:	2213      	movs	r2, #19
 8001a58:	18ba      	adds	r2, r7, r2
 8001a5a:	7812      	ldrb	r2, [r2, #0]
 8001a5c:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001a5e:	2311      	movs	r3, #17
 8001a60:	18fb      	adds	r3, r7, r3
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d105      	bne.n	8001a74 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a68:	4b2b      	ldr	r3, [pc, #172]	@ (8001b18 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001a6a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001a6c:	4b2a      	ldr	r3, [pc, #168]	@ (8001b18 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001a6e:	492e      	ldr	r1, [pc, #184]	@ (8001b28 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001a70:	400a      	ands	r2, r1
 8001a72:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2201      	movs	r2, #1
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	d009      	beq.n	8001a92 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001a7e:	4b26      	ldr	r3, [pc, #152]	@ (8001b18 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001a80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a82:	2203      	movs	r2, #3
 8001a84:	4393      	bics	r3, r2
 8001a86:	0019      	movs	r1, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	689a      	ldr	r2, [r3, #8]
 8001a8c:	4b22      	ldr	r3, [pc, #136]	@ (8001b18 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001a8e:	430a      	orrs	r2, r1
 8001a90:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	2202      	movs	r2, #2
 8001a98:	4013      	ands	r3, r2
 8001a9a:	d009      	beq.n	8001ab0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001a9c:	4b1e      	ldr	r3, [pc, #120]	@ (8001b18 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001a9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001aa0:	4a22      	ldr	r2, [pc, #136]	@ (8001b2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	0019      	movs	r1, r3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	68da      	ldr	r2, [r3, #12]
 8001aaa:	4b1b      	ldr	r3, [pc, #108]	@ (8001b18 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001aac:	430a      	orrs	r2, r1
 8001aae:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2220      	movs	r2, #32
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	d008      	beq.n	8001acc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001aba:	4b17      	ldr	r3, [pc, #92]	@ (8001b18 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001abc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	0899      	lsrs	r1, r3, #2
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	695a      	ldr	r2, [r3, #20]
 8001ac6:	4b14      	ldr	r3, [pc, #80]	@ (8001b18 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001ac8:	430a      	orrs	r2, r1
 8001aca:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);

  }
#endif /* USB_DRD_FS */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2204      	movs	r2, #4
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	d009      	beq.n	8001aea <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001ad6:	4b10      	ldr	r3, [pc, #64]	@ (8001b18 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001ad8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ada:	4a15      	ldr	r2, [pc, #84]	@ (8001b30 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001adc:	4013      	ands	r3, r2
 8001ade:	0019      	movs	r1, r3
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	691a      	ldr	r2, [r3, #16]
 8001ae4:	4b0c      	ldr	r3, [pc, #48]	@ (8001b18 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001ae6:	430a      	orrs	r2, r1
 8001ae8:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	2280      	movs	r2, #128	@ 0x80
 8001af0:	4013      	ands	r3, r2
 8001af2:	d009      	beq.n	8001b08 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8001af4:	4b08      	ldr	r3, [pc, #32]	@ (8001b18 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	22e0      	movs	r2, #224	@ 0xe0
 8001afa:	4393      	bics	r3, r2
 8001afc:	0019      	movs	r1, r3
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685a      	ldr	r2, [r3, #4]
 8001b02:	4b05      	ldr	r3, [pc, #20]	@ (8001b18 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001b04:	430a      	orrs	r2, r1
 8001b06:	601a      	str	r2, [r3, #0]
  }
  return status;
 8001b08:	2312      	movs	r3, #18
 8001b0a:	18fb      	adds	r3, r7, r3
 8001b0c:	781b      	ldrb	r3, [r3, #0]
}
 8001b0e:	0018      	movs	r0, r3
 8001b10:	46bd      	mov	sp, r7
 8001b12:	b006      	add	sp, #24
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	46c0      	nop			@ (mov r8, r8)
 8001b18:	40021000 	.word	0x40021000
 8001b1c:	fffffcff 	.word	0xfffffcff
 8001b20:	fffeffff 	.word	0xfffeffff
 8001b24:	00001388 	.word	0x00001388
 8001b28:	efffffff 	.word	0xefffffff
 8001b2c:	ffffcfff 	.word	0xffffcfff
 8001b30:	ffff3fff 	.word	0xffff3fff

08001b34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d101      	bne.n	8001b46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e046      	b.n	8001bd4 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2288      	movs	r2, #136	@ 0x88
 8001b4a:	589b      	ldr	r3, [r3, r2]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d107      	bne.n	8001b60 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2284      	movs	r2, #132	@ 0x84
 8001b54:	2100      	movs	r1, #0
 8001b56:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	0018      	movs	r0, r3
 8001b5c:	f7fe fe4c 	bl	80007f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2288      	movs	r2, #136	@ 0x88
 8001b64:	2124      	movs	r1, #36	@ 0x24
 8001b66:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	2101      	movs	r1, #1
 8001b74:	438a      	bics	r2, r1
 8001b76:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d003      	beq.n	8001b88 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	0018      	movs	r0, r3
 8001b84:	f000 fe96 	bl	80028b4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	0018      	movs	r0, r3
 8001b8c:	f000 fd14 	bl	80025b8 <UART_SetConfig>
 8001b90:	0003      	movs	r3, r0
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d101      	bne.n	8001b9a <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e01c      	b.n	8001bd4 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	685a      	ldr	r2, [r3, #4]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	490d      	ldr	r1, [pc, #52]	@ (8001bdc <HAL_UART_Init+0xa8>)
 8001ba6:	400a      	ands	r2, r1
 8001ba8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	689a      	ldr	r2, [r3, #8]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	212a      	movs	r1, #42	@ 0x2a
 8001bb6:	438a      	bics	r2, r1
 8001bb8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	2101      	movs	r1, #1
 8001bc6:	430a      	orrs	r2, r1
 8001bc8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	0018      	movs	r0, r3
 8001bce:	f000 ff25 	bl	8002a1c <UART_CheckIdleState>
 8001bd2:	0003      	movs	r3, r0
}
 8001bd4:	0018      	movs	r0, r3
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	b002      	add	sp, #8
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	ffffb7ff 	.word	0xffffb7ff

08001be0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b08a      	sub	sp, #40	@ 0x28
 8001be4:	af02      	add	r7, sp, #8
 8001be6:	60f8      	str	r0, [r7, #12]
 8001be8:	60b9      	str	r1, [r7, #8]
 8001bea:	603b      	str	r3, [r7, #0]
 8001bec:	1dbb      	adds	r3, r7, #6
 8001bee:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	2288      	movs	r2, #136	@ 0x88
 8001bf4:	589b      	ldr	r3, [r3, r2]
 8001bf6:	2b20      	cmp	r3, #32
 8001bf8:	d000      	beq.n	8001bfc <HAL_UART_Transmit+0x1c>
 8001bfa:	e090      	b.n	8001d1e <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d003      	beq.n	8001c0a <HAL_UART_Transmit+0x2a>
 8001c02:	1dbb      	adds	r3, r7, #6
 8001c04:	881b      	ldrh	r3, [r3, #0]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d101      	bne.n	8001c0e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e088      	b.n	8001d20 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	689a      	ldr	r2, [r3, #8]
 8001c12:	2380      	movs	r3, #128	@ 0x80
 8001c14:	015b      	lsls	r3, r3, #5
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d109      	bne.n	8001c2e <HAL_UART_Transmit+0x4e>
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	691b      	ldr	r3, [r3, #16]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d105      	bne.n	8001c2e <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	2201      	movs	r2, #1
 8001c26:	4013      	ands	r3, r2
 8001c28:	d001      	beq.n	8001c2e <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e078      	b.n	8001d20 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2290      	movs	r2, #144	@ 0x90
 8001c32:	2100      	movs	r1, #0
 8001c34:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2288      	movs	r2, #136	@ 0x88
 8001c3a:	2121      	movs	r1, #33	@ 0x21
 8001c3c:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001c3e:	f7fe ff85 	bl	8000b4c <HAL_GetTick>
 8001c42:	0003      	movs	r3, r0
 8001c44:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	1dba      	adds	r2, r7, #6
 8001c4a:	2154      	movs	r1, #84	@ 0x54
 8001c4c:	8812      	ldrh	r2, [r2, #0]
 8001c4e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	1dba      	adds	r2, r7, #6
 8001c54:	2156      	movs	r1, #86	@ 0x56
 8001c56:	8812      	ldrh	r2, [r2, #0]
 8001c58:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	689a      	ldr	r2, [r3, #8]
 8001c5e:	2380      	movs	r3, #128	@ 0x80
 8001c60:	015b      	lsls	r3, r3, #5
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d108      	bne.n	8001c78 <HAL_UART_Transmit+0x98>
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	691b      	ldr	r3, [r3, #16]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d104      	bne.n	8001c78 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	61bb      	str	r3, [r7, #24]
 8001c76:	e003      	b.n	8001c80 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001c80:	e030      	b.n	8001ce4 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001c82:	697a      	ldr	r2, [r7, #20]
 8001c84:	68f8      	ldr	r0, [r7, #12]
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	9300      	str	r3, [sp, #0]
 8001c8a:	0013      	movs	r3, r2
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	2180      	movs	r1, #128	@ 0x80
 8001c90:	f000 ff6e 	bl	8002b70 <UART_WaitOnFlagUntilTimeout>
 8001c94:	1e03      	subs	r3, r0, #0
 8001c96:	d005      	beq.n	8001ca4 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2288      	movs	r2, #136	@ 0x88
 8001c9c:	2120      	movs	r1, #32
 8001c9e:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	e03d      	b.n	8001d20 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d10b      	bne.n	8001cc2 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	881b      	ldrh	r3, [r3, #0]
 8001cae:	001a      	movs	r2, r3
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	05d2      	lsls	r2, r2, #23
 8001cb6:	0dd2      	lsrs	r2, r2, #23
 8001cb8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	3302      	adds	r3, #2
 8001cbe:	61bb      	str	r3, [r7, #24]
 8001cc0:	e007      	b.n	8001cd2 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	781a      	ldrb	r2, [r3, #0]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	3301      	adds	r3, #1
 8001cd0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2256      	movs	r2, #86	@ 0x56
 8001cd6:	5a9b      	ldrh	r3, [r3, r2]
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	3b01      	subs	r3, #1
 8001cdc:	b299      	uxth	r1, r3
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2256      	movs	r2, #86	@ 0x56
 8001ce2:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	2256      	movs	r2, #86	@ 0x56
 8001ce8:	5a9b      	ldrh	r3, [r3, r2]
 8001cea:	b29b      	uxth	r3, r3
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d1c8      	bne.n	8001c82 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001cf0:	697a      	ldr	r2, [r7, #20]
 8001cf2:	68f8      	ldr	r0, [r7, #12]
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	9300      	str	r3, [sp, #0]
 8001cf8:	0013      	movs	r3, r2
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	2140      	movs	r1, #64	@ 0x40
 8001cfe:	f000 ff37 	bl	8002b70 <UART_WaitOnFlagUntilTimeout>
 8001d02:	1e03      	subs	r3, r0, #0
 8001d04:	d005      	beq.n	8001d12 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	2288      	movs	r2, #136	@ 0x88
 8001d0a:	2120      	movs	r1, #32
 8001d0c:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e006      	b.n	8001d20 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2288      	movs	r2, #136	@ 0x88
 8001d16:	2120      	movs	r1, #32
 8001d18:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	e000      	b.n	8001d20 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8001d1e:	2302      	movs	r3, #2
  }
}
 8001d20:	0018      	movs	r0, r3
 8001d22:	46bd      	mov	sp, r7
 8001d24:	b008      	add	sp, #32
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b08a      	sub	sp, #40	@ 0x28
 8001d2c:	af02      	add	r7, sp, #8
 8001d2e:	60f8      	str	r0, [r7, #12]
 8001d30:	60b9      	str	r1, [r7, #8]
 8001d32:	603b      	str	r3, [r7, #0]
 8001d34:	1dbb      	adds	r3, r7, #6
 8001d36:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	228c      	movs	r2, #140	@ 0x8c
 8001d3c:	589b      	ldr	r3, [r3, r2]
 8001d3e:	2b20      	cmp	r3, #32
 8001d40:	d000      	beq.n	8001d44 <HAL_UART_Receive+0x1c>
 8001d42:	e0d0      	b.n	8001ee6 <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d003      	beq.n	8001d52 <HAL_UART_Receive+0x2a>
 8001d4a:	1dbb      	adds	r3, r7, #6
 8001d4c:	881b      	ldrh	r3, [r3, #0]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d101      	bne.n	8001d56 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e0c8      	b.n	8001ee8 <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	689a      	ldr	r2, [r3, #8]
 8001d5a:	2380      	movs	r3, #128	@ 0x80
 8001d5c:	015b      	lsls	r3, r3, #5
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d109      	bne.n	8001d76 <HAL_UART_Receive+0x4e>
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	691b      	ldr	r3, [r3, #16]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d105      	bne.n	8001d76 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	4013      	ands	r3, r2
 8001d70:	d001      	beq.n	8001d76 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e0b8      	b.n	8001ee8 <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2290      	movs	r2, #144	@ 0x90
 8001d7a:	2100      	movs	r1, #0
 8001d7c:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	228c      	movs	r2, #140	@ 0x8c
 8001d82:	2122      	movs	r1, #34	@ 0x22
 8001d84:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001d8c:	f7fe fede 	bl	8000b4c <HAL_GetTick>
 8001d90:	0003      	movs	r3, r0
 8001d92:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	1dba      	adds	r2, r7, #6
 8001d98:	215c      	movs	r1, #92	@ 0x5c
 8001d9a:	8812      	ldrh	r2, [r2, #0]
 8001d9c:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	1dba      	adds	r2, r7, #6
 8001da2:	215e      	movs	r1, #94	@ 0x5e
 8001da4:	8812      	ldrh	r2, [r2, #0]
 8001da6:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	689a      	ldr	r2, [r3, #8]
 8001dac:	2380      	movs	r3, #128	@ 0x80
 8001dae:	015b      	lsls	r3, r3, #5
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d10d      	bne.n	8001dd0 <HAL_UART_Receive+0xa8>
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	691b      	ldr	r3, [r3, #16]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d104      	bne.n	8001dc6 <HAL_UART_Receive+0x9e>
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2260      	movs	r2, #96	@ 0x60
 8001dc0:	494b      	ldr	r1, [pc, #300]	@ (8001ef0 <HAL_UART_Receive+0x1c8>)
 8001dc2:	5299      	strh	r1, [r3, r2]
 8001dc4:	e02e      	b.n	8001e24 <HAL_UART_Receive+0xfc>
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2260      	movs	r2, #96	@ 0x60
 8001dca:	21ff      	movs	r1, #255	@ 0xff
 8001dcc:	5299      	strh	r1, [r3, r2]
 8001dce:	e029      	b.n	8001e24 <HAL_UART_Receive+0xfc>
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d10d      	bne.n	8001df4 <HAL_UART_Receive+0xcc>
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	691b      	ldr	r3, [r3, #16]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d104      	bne.n	8001dea <HAL_UART_Receive+0xc2>
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2260      	movs	r2, #96	@ 0x60
 8001de4:	21ff      	movs	r1, #255	@ 0xff
 8001de6:	5299      	strh	r1, [r3, r2]
 8001de8:	e01c      	b.n	8001e24 <HAL_UART_Receive+0xfc>
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2260      	movs	r2, #96	@ 0x60
 8001dee:	217f      	movs	r1, #127	@ 0x7f
 8001df0:	5299      	strh	r1, [r3, r2]
 8001df2:	e017      	b.n	8001e24 <HAL_UART_Receive+0xfc>
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	689a      	ldr	r2, [r3, #8]
 8001df8:	2380      	movs	r3, #128	@ 0x80
 8001dfa:	055b      	lsls	r3, r3, #21
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d10d      	bne.n	8001e1c <HAL_UART_Receive+0xf4>
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	691b      	ldr	r3, [r3, #16]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d104      	bne.n	8001e12 <HAL_UART_Receive+0xea>
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2260      	movs	r2, #96	@ 0x60
 8001e0c:	217f      	movs	r1, #127	@ 0x7f
 8001e0e:	5299      	strh	r1, [r3, r2]
 8001e10:	e008      	b.n	8001e24 <HAL_UART_Receive+0xfc>
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	2260      	movs	r2, #96	@ 0x60
 8001e16:	213f      	movs	r1, #63	@ 0x3f
 8001e18:	5299      	strh	r1, [r3, r2]
 8001e1a:	e003      	b.n	8001e24 <HAL_UART_Receive+0xfc>
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2260      	movs	r2, #96	@ 0x60
 8001e20:	2100      	movs	r1, #0
 8001e22:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8001e24:	2312      	movs	r3, #18
 8001e26:	18fb      	adds	r3, r7, r3
 8001e28:	68fa      	ldr	r2, [r7, #12]
 8001e2a:	2160      	movs	r1, #96	@ 0x60
 8001e2c:	5a52      	ldrh	r2, [r2, r1]
 8001e2e:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	689a      	ldr	r2, [r3, #8]
 8001e34:	2380      	movs	r3, #128	@ 0x80
 8001e36:	015b      	lsls	r3, r3, #5
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d108      	bne.n	8001e4e <HAL_UART_Receive+0x126>
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	691b      	ldr	r3, [r3, #16]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d104      	bne.n	8001e4e <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8001e44:	2300      	movs	r3, #0
 8001e46:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	61bb      	str	r3, [r7, #24]
 8001e4c:	e003      	b.n	8001e56 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001e52:	2300      	movs	r3, #0
 8001e54:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8001e56:	e03a      	b.n	8001ece <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001e58:	697a      	ldr	r2, [r7, #20]
 8001e5a:	68f8      	ldr	r0, [r7, #12]
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	9300      	str	r3, [sp, #0]
 8001e60:	0013      	movs	r3, r2
 8001e62:	2200      	movs	r2, #0
 8001e64:	2120      	movs	r1, #32
 8001e66:	f000 fe83 	bl	8002b70 <UART_WaitOnFlagUntilTimeout>
 8001e6a:	1e03      	subs	r3, r0, #0
 8001e6c:	d005      	beq.n	8001e7a <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	228c      	movs	r2, #140	@ 0x8c
 8001e72:	2120      	movs	r1, #32
 8001e74:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e036      	b.n	8001ee8 <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d10e      	bne.n	8001e9e <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	2212      	movs	r2, #18
 8001e8a:	18ba      	adds	r2, r7, r2
 8001e8c:	8812      	ldrh	r2, [r2, #0]
 8001e8e:	4013      	ands	r3, r2
 8001e90:	b29a      	uxth	r2, r3
 8001e92:	69bb      	ldr	r3, [r7, #24]
 8001e94:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	3302      	adds	r3, #2
 8001e9a:	61bb      	str	r3, [r7, #24]
 8001e9c:	e00e      	b.n	8001ebc <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	2212      	movs	r2, #18
 8001ea8:	18ba      	adds	r2, r7, r2
 8001eaa:	8812      	ldrh	r2, [r2, #0]
 8001eac:	b2d2      	uxtb	r2, r2
 8001eae:	4013      	ands	r3, r2
 8001eb0:	b2da      	uxtb	r2, r3
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	3301      	adds	r3, #1
 8001eba:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	225e      	movs	r2, #94	@ 0x5e
 8001ec0:	5a9b      	ldrh	r3, [r3, r2]
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	3b01      	subs	r3, #1
 8001ec6:	b299      	uxth	r1, r3
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	225e      	movs	r2, #94	@ 0x5e
 8001ecc:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	225e      	movs	r2, #94	@ 0x5e
 8001ed2:	5a9b      	ldrh	r3, [r3, r2]
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d1be      	bne.n	8001e58 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	228c      	movs	r2, #140	@ 0x8c
 8001ede:	2120      	movs	r1, #32
 8001ee0:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	e000      	b.n	8001ee8 <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 8001ee6:	2302      	movs	r3, #2
  }
}
 8001ee8:	0018      	movs	r0, r3
 8001eea:	46bd      	mov	sp, r7
 8001eec:	b008      	add	sp, #32
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	000001ff 	.word	0x000001ff

08001ef4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001ef4:	b5b0      	push	{r4, r5, r7, lr}
 8001ef6:	b0aa      	sub	sp, #168	@ 0xa8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	69db      	ldr	r3, [r3, #28]
 8001f02:	22a4      	movs	r2, #164	@ 0xa4
 8001f04:	18b9      	adds	r1, r7, r2
 8001f06:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	20a0      	movs	r0, #160	@ 0xa0
 8001f10:	1839      	adds	r1, r7, r0
 8001f12:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	249c      	movs	r4, #156	@ 0x9c
 8001f1c:	1939      	adds	r1, r7, r4
 8001f1e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8001f20:	0011      	movs	r1, r2
 8001f22:	18bb      	adds	r3, r7, r2
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4aa2      	ldr	r2, [pc, #648]	@ (80021b0 <HAL_UART_IRQHandler+0x2bc>)
 8001f28:	4013      	ands	r3, r2
 8001f2a:	2298      	movs	r2, #152	@ 0x98
 8001f2c:	18bd      	adds	r5, r7, r2
 8001f2e:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8001f30:	18bb      	adds	r3, r7, r2
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d11a      	bne.n	8001f6e <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8001f38:	187b      	adds	r3, r7, r1
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	2220      	movs	r2, #32
 8001f3e:	4013      	ands	r3, r2
 8001f40:	d015      	beq.n	8001f6e <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8001f42:	183b      	adds	r3, r7, r0
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	2220      	movs	r2, #32
 8001f48:	4013      	ands	r3, r2
 8001f4a:	d105      	bne.n	8001f58 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8001f4c:	193b      	adds	r3, r7, r4
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	2380      	movs	r3, #128	@ 0x80
 8001f52:	055b      	lsls	r3, r3, #21
 8001f54:	4013      	ands	r3, r2
 8001f56:	d00a      	beq.n	8001f6e <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d100      	bne.n	8001f62 <HAL_UART_IRQHandler+0x6e>
 8001f60:	e2fb      	b.n	800255a <HAL_UART_IRQHandler+0x666>
      {
        huart->RxISR(huart);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	0010      	movs	r0, r2
 8001f6a:	4798      	blx	r3
      }
      return;
 8001f6c:	e2f5      	b.n	800255a <HAL_UART_IRQHandler+0x666>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8001f6e:	2398      	movs	r3, #152	@ 0x98
 8001f70:	18fb      	adds	r3, r7, r3
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d100      	bne.n	8001f7a <HAL_UART_IRQHandler+0x86>
 8001f78:	e122      	b.n	80021c0 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8001f7a:	239c      	movs	r3, #156	@ 0x9c
 8001f7c:	18fb      	adds	r3, r7, r3
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a8c      	ldr	r2, [pc, #560]	@ (80021b4 <HAL_UART_IRQHandler+0x2c0>)
 8001f82:	4013      	ands	r3, r2
 8001f84:	d106      	bne.n	8001f94 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8001f86:	23a0      	movs	r3, #160	@ 0xa0
 8001f88:	18fb      	adds	r3, r7, r3
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a8a      	ldr	r2, [pc, #552]	@ (80021b8 <HAL_UART_IRQHandler+0x2c4>)
 8001f8e:	4013      	ands	r3, r2
 8001f90:	d100      	bne.n	8001f94 <HAL_UART_IRQHandler+0xa0>
 8001f92:	e115      	b.n	80021c0 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8001f94:	23a4      	movs	r3, #164	@ 0xa4
 8001f96:	18fb      	adds	r3, r7, r3
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	d012      	beq.n	8001fc6 <HAL_UART_IRQHandler+0xd2>
 8001fa0:	23a0      	movs	r3, #160	@ 0xa0
 8001fa2:	18fb      	adds	r3, r7, r3
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	2380      	movs	r3, #128	@ 0x80
 8001fa8:	005b      	lsls	r3, r3, #1
 8001faa:	4013      	ands	r3, r2
 8001fac:	d00b      	beq.n	8001fc6 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2290      	movs	r2, #144	@ 0x90
 8001fba:	589b      	ldr	r3, [r3, r2]
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	431a      	orrs	r2, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2190      	movs	r1, #144	@ 0x90
 8001fc4:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001fc6:	23a4      	movs	r3, #164	@ 0xa4
 8001fc8:	18fb      	adds	r3, r7, r3
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2202      	movs	r2, #2
 8001fce:	4013      	ands	r3, r2
 8001fd0:	d011      	beq.n	8001ff6 <HAL_UART_IRQHandler+0x102>
 8001fd2:	239c      	movs	r3, #156	@ 0x9c
 8001fd4:	18fb      	adds	r3, r7, r3
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	2201      	movs	r2, #1
 8001fda:	4013      	ands	r3, r2
 8001fdc:	d00b      	beq.n	8001ff6 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	2202      	movs	r2, #2
 8001fe4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2290      	movs	r2, #144	@ 0x90
 8001fea:	589b      	ldr	r3, [r3, r2]
 8001fec:	2204      	movs	r2, #4
 8001fee:	431a      	orrs	r2, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2190      	movs	r1, #144	@ 0x90
 8001ff4:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001ff6:	23a4      	movs	r3, #164	@ 0xa4
 8001ff8:	18fb      	adds	r3, r7, r3
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2204      	movs	r2, #4
 8001ffe:	4013      	ands	r3, r2
 8002000:	d011      	beq.n	8002026 <HAL_UART_IRQHandler+0x132>
 8002002:	239c      	movs	r3, #156	@ 0x9c
 8002004:	18fb      	adds	r3, r7, r3
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2201      	movs	r2, #1
 800200a:	4013      	ands	r3, r2
 800200c:	d00b      	beq.n	8002026 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2204      	movs	r2, #4
 8002014:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2290      	movs	r2, #144	@ 0x90
 800201a:	589b      	ldr	r3, [r3, r2]
 800201c:	2202      	movs	r2, #2
 800201e:	431a      	orrs	r2, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2190      	movs	r1, #144	@ 0x90
 8002024:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002026:	23a4      	movs	r3, #164	@ 0xa4
 8002028:	18fb      	adds	r3, r7, r3
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2208      	movs	r2, #8
 800202e:	4013      	ands	r3, r2
 8002030:	d017      	beq.n	8002062 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002032:	23a0      	movs	r3, #160	@ 0xa0
 8002034:	18fb      	adds	r3, r7, r3
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2220      	movs	r2, #32
 800203a:	4013      	ands	r3, r2
 800203c:	d105      	bne.n	800204a <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800203e:	239c      	movs	r3, #156	@ 0x9c
 8002040:	18fb      	adds	r3, r7, r3
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a5b      	ldr	r2, [pc, #364]	@ (80021b4 <HAL_UART_IRQHandler+0x2c0>)
 8002046:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002048:	d00b      	beq.n	8002062 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	2208      	movs	r2, #8
 8002050:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2290      	movs	r2, #144	@ 0x90
 8002056:	589b      	ldr	r3, [r3, r2]
 8002058:	2208      	movs	r2, #8
 800205a:	431a      	orrs	r2, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2190      	movs	r1, #144	@ 0x90
 8002060:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002062:	23a4      	movs	r3, #164	@ 0xa4
 8002064:	18fb      	adds	r3, r7, r3
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	2380      	movs	r3, #128	@ 0x80
 800206a:	011b      	lsls	r3, r3, #4
 800206c:	4013      	ands	r3, r2
 800206e:	d013      	beq.n	8002098 <HAL_UART_IRQHandler+0x1a4>
 8002070:	23a0      	movs	r3, #160	@ 0xa0
 8002072:	18fb      	adds	r3, r7, r3
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	2380      	movs	r3, #128	@ 0x80
 8002078:	04db      	lsls	r3, r3, #19
 800207a:	4013      	ands	r3, r2
 800207c:	d00c      	beq.n	8002098 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	2280      	movs	r2, #128	@ 0x80
 8002084:	0112      	lsls	r2, r2, #4
 8002086:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2290      	movs	r2, #144	@ 0x90
 800208c:	589b      	ldr	r3, [r3, r2]
 800208e:	2220      	movs	r2, #32
 8002090:	431a      	orrs	r2, r3
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2190      	movs	r1, #144	@ 0x90
 8002096:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2290      	movs	r2, #144	@ 0x90
 800209c:	589b      	ldr	r3, [r3, r2]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d100      	bne.n	80020a4 <HAL_UART_IRQHandler+0x1b0>
 80020a2:	e25c      	b.n	800255e <HAL_UART_IRQHandler+0x66a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80020a4:	23a4      	movs	r3, #164	@ 0xa4
 80020a6:	18fb      	adds	r3, r7, r3
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	2220      	movs	r2, #32
 80020ac:	4013      	ands	r3, r2
 80020ae:	d015      	beq.n	80020dc <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80020b0:	23a0      	movs	r3, #160	@ 0xa0
 80020b2:	18fb      	adds	r3, r7, r3
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2220      	movs	r2, #32
 80020b8:	4013      	ands	r3, r2
 80020ba:	d106      	bne.n	80020ca <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80020bc:	239c      	movs	r3, #156	@ 0x9c
 80020be:	18fb      	adds	r3, r7, r3
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	2380      	movs	r3, #128	@ 0x80
 80020c4:	055b      	lsls	r3, r3, #21
 80020c6:	4013      	ands	r3, r2
 80020c8:	d008      	beq.n	80020dc <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d004      	beq.n	80020dc <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	0010      	movs	r0, r2
 80020da:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2290      	movs	r2, #144	@ 0x90
 80020e0:	589b      	ldr	r3, [r3, r2]
 80020e2:	2194      	movs	r1, #148	@ 0x94
 80020e4:	187a      	adds	r2, r7, r1
 80020e6:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	2240      	movs	r2, #64	@ 0x40
 80020f0:	4013      	ands	r3, r2
 80020f2:	2b40      	cmp	r3, #64	@ 0x40
 80020f4:	d004      	beq.n	8002100 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80020f6:	187b      	adds	r3, r7, r1
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2228      	movs	r2, #40	@ 0x28
 80020fc:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80020fe:	d04c      	beq.n	800219a <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	0018      	movs	r0, r3
 8002104:	f000 fda4 	bl	8002c50 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	2240      	movs	r2, #64	@ 0x40
 8002110:	4013      	ands	r3, r2
 8002112:	2b40      	cmp	r3, #64	@ 0x40
 8002114:	d13c      	bne.n	8002190 <HAL_UART_IRQHandler+0x29c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002116:	f3ef 8310 	mrs	r3, PRIMASK
 800211a:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 800211c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800211e:	2090      	movs	r0, #144	@ 0x90
 8002120:	183a      	adds	r2, r7, r0
 8002122:	6013      	str	r3, [r2, #0]
 8002124:	2301      	movs	r3, #1
 8002126:	667b      	str	r3, [r7, #100]	@ 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002128:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800212a:	f383 8810 	msr	PRIMASK, r3
}
 800212e:	46c0      	nop			@ (mov r8, r8)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	689a      	ldr	r2, [r3, #8]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	2140      	movs	r1, #64	@ 0x40
 800213c:	438a      	bics	r2, r1
 800213e:	609a      	str	r2, [r3, #8]
 8002140:	183b      	adds	r3, r7, r0
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002146:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002148:	f383 8810 	msr	PRIMASK, r3
}
 800214c:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2280      	movs	r2, #128	@ 0x80
 8002152:	589b      	ldr	r3, [r3, r2]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d016      	beq.n	8002186 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2280      	movs	r2, #128	@ 0x80
 800215c:	589b      	ldr	r3, [r3, r2]
 800215e:	4a17      	ldr	r2, [pc, #92]	@ (80021bc <HAL_UART_IRQHandler+0x2c8>)
 8002160:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2280      	movs	r2, #128	@ 0x80
 8002166:	589b      	ldr	r3, [r3, r2]
 8002168:	0018      	movs	r0, r3
 800216a:	f7fe fe5d 	bl	8000e28 <HAL_DMA_Abort_IT>
 800216e:	1e03      	subs	r3, r0, #0
 8002170:	d01c      	beq.n	80021ac <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2280      	movs	r2, #128	@ 0x80
 8002176:	589b      	ldr	r3, [r3, r2]
 8002178:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	2180      	movs	r1, #128	@ 0x80
 800217e:	5852      	ldr	r2, [r2, r1]
 8002180:	0010      	movs	r0, r2
 8002182:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002184:	e012      	b.n	80021ac <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	0018      	movs	r0, r3
 800218a:	f000 fa01 	bl	8002590 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800218e:	e00d      	b.n	80021ac <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	0018      	movs	r0, r3
 8002194:	f000 f9fc 	bl	8002590 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002198:	e008      	b.n	80021ac <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	0018      	movs	r0, r3
 800219e:	f000 f9f7 	bl	8002590 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2290      	movs	r2, #144	@ 0x90
 80021a6:	2100      	movs	r1, #0
 80021a8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80021aa:	e1d8      	b.n	800255e <HAL_UART_IRQHandler+0x66a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021ac:	46c0      	nop			@ (mov r8, r8)
    return;
 80021ae:	e1d6      	b.n	800255e <HAL_UART_IRQHandler+0x66a>
 80021b0:	0000080f 	.word	0x0000080f
 80021b4:	10000001 	.word	0x10000001
 80021b8:	04000120 	.word	0x04000120
 80021bc:	08002d1d 	.word	0x08002d1d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d000      	beq.n	80021ca <HAL_UART_IRQHandler+0x2d6>
 80021c8:	e15d      	b.n	8002486 <HAL_UART_IRQHandler+0x592>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80021ca:	23a4      	movs	r3, #164	@ 0xa4
 80021cc:	18fb      	adds	r3, r7, r3
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	2210      	movs	r2, #16
 80021d2:	4013      	ands	r3, r2
 80021d4:	d100      	bne.n	80021d8 <HAL_UART_IRQHandler+0x2e4>
 80021d6:	e156      	b.n	8002486 <HAL_UART_IRQHandler+0x592>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80021d8:	23a0      	movs	r3, #160	@ 0xa0
 80021da:	18fb      	adds	r3, r7, r3
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	2210      	movs	r2, #16
 80021e0:	4013      	ands	r3, r2
 80021e2:	d100      	bne.n	80021e6 <HAL_UART_IRQHandler+0x2f2>
 80021e4:	e14f      	b.n	8002486 <HAL_UART_IRQHandler+0x592>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	2210      	movs	r2, #16
 80021ec:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	2240      	movs	r2, #64	@ 0x40
 80021f6:	4013      	ands	r3, r2
 80021f8:	2b40      	cmp	r3, #64	@ 0x40
 80021fa:	d000      	beq.n	80021fe <HAL_UART_IRQHandler+0x30a>
 80021fc:	e0c3      	b.n	8002386 <HAL_UART_IRQHandler+0x492>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2280      	movs	r2, #128	@ 0x80
 8002202:	589b      	ldr	r3, [r3, r2]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	685a      	ldr	r2, [r3, #4]
 8002208:	217e      	movs	r1, #126	@ 0x7e
 800220a:	187b      	adds	r3, r7, r1
 800220c:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800220e:	187b      	adds	r3, r7, r1
 8002210:	881b      	ldrh	r3, [r3, #0]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d100      	bne.n	8002218 <HAL_UART_IRQHandler+0x324>
 8002216:	e097      	b.n	8002348 <HAL_UART_IRQHandler+0x454>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	225c      	movs	r2, #92	@ 0x5c
 800221c:	5a9b      	ldrh	r3, [r3, r2]
 800221e:	187a      	adds	r2, r7, r1
 8002220:	8812      	ldrh	r2, [r2, #0]
 8002222:	429a      	cmp	r2, r3
 8002224:	d300      	bcc.n	8002228 <HAL_UART_IRQHandler+0x334>
 8002226:	e08f      	b.n	8002348 <HAL_UART_IRQHandler+0x454>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	187a      	adds	r2, r7, r1
 800222c:	215e      	movs	r1, #94	@ 0x5e
 800222e:	8812      	ldrh	r2, [r2, #0]
 8002230:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2280      	movs	r2, #128	@ 0x80
 8002236:	589b      	ldr	r3, [r3, r2]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2220      	movs	r2, #32
 800223e:	4013      	ands	r3, r2
 8002240:	d170      	bne.n	8002324 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002242:	f3ef 8310 	mrs	r3, PRIMASK
 8002246:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8002248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800224a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800224c:	2301      	movs	r3, #1
 800224e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002250:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002252:	f383 8810 	msr	PRIMASK, r3
}
 8002256:	46c0      	nop			@ (mov r8, r8)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	49c4      	ldr	r1, [pc, #784]	@ (8002574 <HAL_UART_IRQHandler+0x680>)
 8002264:	400a      	ands	r2, r1
 8002266:	601a      	str	r2, [r3, #0]
 8002268:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800226a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800226c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800226e:	f383 8810 	msr	PRIMASK, r3
}
 8002272:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002274:	f3ef 8310 	mrs	r3, PRIMASK
 8002278:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800227a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800227c:	677b      	str	r3, [r7, #116]	@ 0x74
 800227e:	2301      	movs	r3, #1
 8002280:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002282:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002284:	f383 8810 	msr	PRIMASK, r3
}
 8002288:	46c0      	nop			@ (mov r8, r8)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	689a      	ldr	r2, [r3, #8]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2101      	movs	r1, #1
 8002296:	438a      	bics	r2, r1
 8002298:	609a      	str	r2, [r3, #8]
 800229a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800229c:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800229e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80022a0:	f383 8810 	msr	PRIMASK, r3
}
 80022a4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80022a6:	f3ef 8310 	mrs	r3, PRIMASK
 80022aa:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 80022ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80022ae:	673b      	str	r3, [r7, #112]	@ 0x70
 80022b0:	2301      	movs	r3, #1
 80022b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80022b6:	f383 8810 	msr	PRIMASK, r3
}
 80022ba:	46c0      	nop			@ (mov r8, r8)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	689a      	ldr	r2, [r3, #8]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2140      	movs	r1, #64	@ 0x40
 80022c8:	438a      	bics	r2, r1
 80022ca:	609a      	str	r2, [r3, #8]
 80022cc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80022ce:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80022d2:	f383 8810 	msr	PRIMASK, r3
}
 80022d6:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	228c      	movs	r2, #140	@ 0x8c
 80022dc:	2120      	movs	r1, #32
 80022de:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2200      	movs	r2, #0
 80022e4:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80022e6:	f3ef 8310 	mrs	r3, PRIMASK
 80022ea:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 80022ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80022ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80022f0:	2301      	movs	r3, #1
 80022f2:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022f4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80022f6:	f383 8810 	msr	PRIMASK, r3
}
 80022fa:	46c0      	nop			@ (mov r8, r8)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2110      	movs	r1, #16
 8002308:	438a      	bics	r2, r1
 800230a:	601a      	str	r2, [r3, #0]
 800230c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800230e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002310:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002312:	f383 8810 	msr	PRIMASK, r3
}
 8002316:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2280      	movs	r2, #128	@ 0x80
 800231c:	589b      	ldr	r3, [r3, r2]
 800231e:	0018      	movs	r0, r3
 8002320:	f7fe fd20 	bl	8000d64 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2202      	movs	r2, #2
 8002328:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	225c      	movs	r2, #92	@ 0x5c
 800232e:	5a9a      	ldrh	r2, [r3, r2]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	215e      	movs	r1, #94	@ 0x5e
 8002334:	5a5b      	ldrh	r3, [r3, r1]
 8002336:	b29b      	uxth	r3, r3
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	b29a      	uxth	r2, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	0011      	movs	r1, r2
 8002340:	0018      	movs	r0, r3
 8002342:	f000 f92d 	bl	80025a0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8002346:	e10c      	b.n	8002562 <HAL_UART_IRQHandler+0x66e>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	225c      	movs	r2, #92	@ 0x5c
 800234c:	5a9b      	ldrh	r3, [r3, r2]
 800234e:	227e      	movs	r2, #126	@ 0x7e
 8002350:	18ba      	adds	r2, r7, r2
 8002352:	8812      	ldrh	r2, [r2, #0]
 8002354:	429a      	cmp	r2, r3
 8002356:	d000      	beq.n	800235a <HAL_UART_IRQHandler+0x466>
 8002358:	e103      	b.n	8002562 <HAL_UART_IRQHandler+0x66e>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2280      	movs	r2, #128	@ 0x80
 800235e:	589b      	ldr	r3, [r3, r2]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2220      	movs	r2, #32
 8002366:	4013      	ands	r3, r2
 8002368:	2b20      	cmp	r3, #32
 800236a:	d000      	beq.n	800236e <HAL_UART_IRQHandler+0x47a>
 800236c:	e0f9      	b.n	8002562 <HAL_UART_IRQHandler+0x66e>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2202      	movs	r2, #2
 8002372:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	225c      	movs	r2, #92	@ 0x5c
 8002378:	5a9a      	ldrh	r2, [r3, r2]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	0011      	movs	r1, r2
 800237e:	0018      	movs	r0, r3
 8002380:	f000 f90e 	bl	80025a0 <HAL_UARTEx_RxEventCallback>
      return;
 8002384:	e0ed      	b.n	8002562 <HAL_UART_IRQHandler+0x66e>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	225c      	movs	r2, #92	@ 0x5c
 800238a:	5a99      	ldrh	r1, [r3, r2]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	225e      	movs	r2, #94	@ 0x5e
 8002390:	5a9b      	ldrh	r3, [r3, r2]
 8002392:	b29a      	uxth	r2, r3
 8002394:	208e      	movs	r0, #142	@ 0x8e
 8002396:	183b      	adds	r3, r7, r0
 8002398:	1a8a      	subs	r2, r1, r2
 800239a:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	225e      	movs	r2, #94	@ 0x5e
 80023a0:	5a9b      	ldrh	r3, [r3, r2]
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d100      	bne.n	80023aa <HAL_UART_IRQHandler+0x4b6>
 80023a8:	e0dd      	b.n	8002566 <HAL_UART_IRQHandler+0x672>
          && (nb_rx_data > 0U))
 80023aa:	183b      	adds	r3, r7, r0
 80023ac:	881b      	ldrh	r3, [r3, #0]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d100      	bne.n	80023b4 <HAL_UART_IRQHandler+0x4c0>
 80023b2:	e0d8      	b.n	8002566 <HAL_UART_IRQHandler+0x672>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80023b4:	f3ef 8310 	mrs	r3, PRIMASK
 80023b8:	60fb      	str	r3, [r7, #12]
  return(result);
 80023ba:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80023bc:	2488      	movs	r4, #136	@ 0x88
 80023be:	193a      	adds	r2, r7, r4
 80023c0:	6013      	str	r3, [r2, #0]
 80023c2:	2301      	movs	r3, #1
 80023c4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	f383 8810 	msr	PRIMASK, r3
}
 80023cc:	46c0      	nop			@ (mov r8, r8)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4967      	ldr	r1, [pc, #412]	@ (8002578 <HAL_UART_IRQHandler+0x684>)
 80023da:	400a      	ands	r2, r1
 80023dc:	601a      	str	r2, [r3, #0]
 80023de:	193b      	adds	r3, r7, r4
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	f383 8810 	msr	PRIMASK, r3
}
 80023ea:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80023ec:	f3ef 8310 	mrs	r3, PRIMASK
 80023f0:	61bb      	str	r3, [r7, #24]
  return(result);
 80023f2:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80023f4:	2484      	movs	r4, #132	@ 0x84
 80023f6:	193a      	adds	r2, r7, r4
 80023f8:	6013      	str	r3, [r2, #0]
 80023fa:	2301      	movs	r3, #1
 80023fc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	f383 8810 	msr	PRIMASK, r3
}
 8002404:	46c0      	nop			@ (mov r8, r8)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	689a      	ldr	r2, [r3, #8]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	495a      	ldr	r1, [pc, #360]	@ (800257c <HAL_UART_IRQHandler+0x688>)
 8002412:	400a      	ands	r2, r1
 8002414:	609a      	str	r2, [r3, #8]
 8002416:	193b      	adds	r3, r7, r4
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800241c:	6a3b      	ldr	r3, [r7, #32]
 800241e:	f383 8810 	msr	PRIMASK, r3
}
 8002422:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	228c      	movs	r2, #140	@ 0x8c
 8002428:	2120      	movs	r1, #32
 800242a:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002438:	f3ef 8310 	mrs	r3, PRIMASK
 800243c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800243e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002440:	2480      	movs	r4, #128	@ 0x80
 8002442:	193a      	adds	r2, r7, r4
 8002444:	6013      	str	r3, [r2, #0]
 8002446:	2301      	movs	r3, #1
 8002448:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800244a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800244c:	f383 8810 	msr	PRIMASK, r3
}
 8002450:	46c0      	nop			@ (mov r8, r8)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2110      	movs	r1, #16
 800245e:	438a      	bics	r2, r1
 8002460:	601a      	str	r2, [r3, #0]
 8002462:	193b      	adds	r3, r7, r4
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002468:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800246a:	f383 8810 	msr	PRIMASK, r3
}
 800246e:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2202      	movs	r2, #2
 8002474:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002476:	183b      	adds	r3, r7, r0
 8002478:	881a      	ldrh	r2, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	0011      	movs	r1, r2
 800247e:	0018      	movs	r0, r3
 8002480:	f000 f88e 	bl	80025a0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002484:	e06f      	b.n	8002566 <HAL_UART_IRQHandler+0x672>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002486:	23a4      	movs	r3, #164	@ 0xa4
 8002488:	18fb      	adds	r3, r7, r3
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	2380      	movs	r3, #128	@ 0x80
 800248e:	035b      	lsls	r3, r3, #13
 8002490:	4013      	ands	r3, r2
 8002492:	d010      	beq.n	80024b6 <HAL_UART_IRQHandler+0x5c2>
 8002494:	239c      	movs	r3, #156	@ 0x9c
 8002496:	18fb      	adds	r3, r7, r3
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	2380      	movs	r3, #128	@ 0x80
 800249c:	03db      	lsls	r3, r3, #15
 800249e:	4013      	ands	r3, r2
 80024a0:	d009      	beq.n	80024b6 <HAL_UART_IRQHandler+0x5c2>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2280      	movs	r2, #128	@ 0x80
 80024a8:	0352      	lsls	r2, r2, #13
 80024aa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	0018      	movs	r0, r3
 80024b0:	f000 fc77 	bl	8002da2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80024b4:	e05a      	b.n	800256c <HAL_UART_IRQHandler+0x678>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80024b6:	23a4      	movs	r3, #164	@ 0xa4
 80024b8:	18fb      	adds	r3, r7, r3
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2280      	movs	r2, #128	@ 0x80
 80024be:	4013      	ands	r3, r2
 80024c0:	d016      	beq.n	80024f0 <HAL_UART_IRQHandler+0x5fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80024c2:	23a0      	movs	r3, #160	@ 0xa0
 80024c4:	18fb      	adds	r3, r7, r3
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2280      	movs	r2, #128	@ 0x80
 80024ca:	4013      	ands	r3, r2
 80024cc:	d106      	bne.n	80024dc <HAL_UART_IRQHandler+0x5e8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80024ce:	239c      	movs	r3, #156	@ 0x9c
 80024d0:	18fb      	adds	r3, r7, r3
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	2380      	movs	r3, #128	@ 0x80
 80024d6:	041b      	lsls	r3, r3, #16
 80024d8:	4013      	ands	r3, r2
 80024da:	d009      	beq.n	80024f0 <HAL_UART_IRQHandler+0x5fc>
  {
    if (huart->TxISR != NULL)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d042      	beq.n	800256a <HAL_UART_IRQHandler+0x676>
    {
      huart->TxISR(huart);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	0010      	movs	r0, r2
 80024ec:	4798      	blx	r3
    }
    return;
 80024ee:	e03c      	b.n	800256a <HAL_UART_IRQHandler+0x676>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80024f0:	23a4      	movs	r3, #164	@ 0xa4
 80024f2:	18fb      	adds	r3, r7, r3
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2240      	movs	r2, #64	@ 0x40
 80024f8:	4013      	ands	r3, r2
 80024fa:	d00a      	beq.n	8002512 <HAL_UART_IRQHandler+0x61e>
 80024fc:	23a0      	movs	r3, #160	@ 0xa0
 80024fe:	18fb      	adds	r3, r7, r3
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	2240      	movs	r2, #64	@ 0x40
 8002504:	4013      	ands	r3, r2
 8002506:	d004      	beq.n	8002512 <HAL_UART_IRQHandler+0x61e>
  {
    UART_EndTransmit_IT(huart);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	0018      	movs	r0, r3
 800250c:	f000 fc1d 	bl	8002d4a <UART_EndTransmit_IT>
    return;
 8002510:	e02c      	b.n	800256c <HAL_UART_IRQHandler+0x678>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002512:	23a4      	movs	r3, #164	@ 0xa4
 8002514:	18fb      	adds	r3, r7, r3
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	2380      	movs	r3, #128	@ 0x80
 800251a:	041b      	lsls	r3, r3, #16
 800251c:	4013      	ands	r3, r2
 800251e:	d00b      	beq.n	8002538 <HAL_UART_IRQHandler+0x644>
 8002520:	23a0      	movs	r3, #160	@ 0xa0
 8002522:	18fb      	adds	r3, r7, r3
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	2380      	movs	r3, #128	@ 0x80
 8002528:	05db      	lsls	r3, r3, #23
 800252a:	4013      	ands	r3, r2
 800252c:	d004      	beq.n	8002538 <HAL_UART_IRQHandler+0x644>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	0018      	movs	r0, r3
 8002532:	f000 fc46 	bl	8002dc2 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002536:	e019      	b.n	800256c <HAL_UART_IRQHandler+0x678>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002538:	23a4      	movs	r3, #164	@ 0xa4
 800253a:	18fb      	adds	r3, r7, r3
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	2380      	movs	r3, #128	@ 0x80
 8002540:	045b      	lsls	r3, r3, #17
 8002542:	4013      	ands	r3, r2
 8002544:	d012      	beq.n	800256c <HAL_UART_IRQHandler+0x678>
 8002546:	23a0      	movs	r3, #160	@ 0xa0
 8002548:	18fb      	adds	r3, r7, r3
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2b00      	cmp	r3, #0
 800254e:	da0d      	bge.n	800256c <HAL_UART_IRQHandler+0x678>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	0018      	movs	r0, r3
 8002554:	f000 fc2d 	bl	8002db2 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002558:	e008      	b.n	800256c <HAL_UART_IRQHandler+0x678>
      return;
 800255a:	46c0      	nop			@ (mov r8, r8)
 800255c:	e006      	b.n	800256c <HAL_UART_IRQHandler+0x678>
    return;
 800255e:	46c0      	nop			@ (mov r8, r8)
 8002560:	e004      	b.n	800256c <HAL_UART_IRQHandler+0x678>
      return;
 8002562:	46c0      	nop			@ (mov r8, r8)
 8002564:	e002      	b.n	800256c <HAL_UART_IRQHandler+0x678>
      return;
 8002566:	46c0      	nop			@ (mov r8, r8)
 8002568:	e000      	b.n	800256c <HAL_UART_IRQHandler+0x678>
    return;
 800256a:	46c0      	nop			@ (mov r8, r8)
  }
}
 800256c:	46bd      	mov	sp, r7
 800256e:	b02a      	add	sp, #168	@ 0xa8
 8002570:	bdb0      	pop	{r4, r5, r7, pc}
 8002572:	46c0      	nop			@ (mov r8, r8)
 8002574:	fffffeff 	.word	0xfffffeff
 8002578:	fffffedf 	.word	0xfffffedf
 800257c:	effffffe 	.word	0xeffffffe

08002580 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002588:	46c0      	nop			@ (mov r8, r8)
 800258a:	46bd      	mov	sp, r7
 800258c:	b002      	add	sp, #8
 800258e:	bd80      	pop	{r7, pc}

08002590 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002598:	46c0      	nop			@ (mov r8, r8)
 800259a:	46bd      	mov	sp, r7
 800259c:	b002      	add	sp, #8
 800259e:	bd80      	pop	{r7, pc}

080025a0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	000a      	movs	r2, r1
 80025aa:	1cbb      	adds	r3, r7, #2
 80025ac:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80025ae:	46c0      	nop			@ (mov r8, r8)
 80025b0:	46bd      	mov	sp, r7
 80025b2:	b002      	add	sp, #8
 80025b4:	bd80      	pop	{r7, pc}
	...

080025b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b088      	sub	sp, #32
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80025c0:	231e      	movs	r3, #30
 80025c2:	18fb      	adds	r3, r7, r3
 80025c4:	2200      	movs	r2, #0
 80025c6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	689a      	ldr	r2, [r3, #8]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	691b      	ldr	r3, [r3, #16]
 80025d0:	431a      	orrs	r2, r3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	695b      	ldr	r3, [r3, #20]
 80025d6:	431a      	orrs	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	69db      	ldr	r3, [r3, #28]
 80025dc:	4313      	orrs	r3, r2
 80025de:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4aab      	ldr	r2, [pc, #684]	@ (8002894 <UART_SetConfig+0x2dc>)
 80025e8:	4013      	ands	r3, r2
 80025ea:	0019      	movs	r1, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	697a      	ldr	r2, [r7, #20]
 80025f2:	430a      	orrs	r2, r1
 80025f4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	4aa6      	ldr	r2, [pc, #664]	@ (8002898 <UART_SetConfig+0x2e0>)
 80025fe:	4013      	ands	r3, r2
 8002600:	0019      	movs	r1, r3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	68da      	ldr	r2, [r3, #12]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	430a      	orrs	r2, r1
 800260c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	699b      	ldr	r3, [r3, #24]
 8002612:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6a1b      	ldr	r3, [r3, #32]
 8002618:	697a      	ldr	r2, [r7, #20]
 800261a:	4313      	orrs	r3, r2
 800261c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	4a9d      	ldr	r2, [pc, #628]	@ (800289c <UART_SetConfig+0x2e4>)
 8002626:	4013      	ands	r3, r2
 8002628:	0019      	movs	r1, r3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	697a      	ldr	r2, [r7, #20]
 8002630:	430a      	orrs	r2, r1
 8002632:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800263a:	220f      	movs	r2, #15
 800263c:	4393      	bics	r3, r2
 800263e:	0019      	movs	r1, r3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	430a      	orrs	r2, r1
 800264a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a93      	ldr	r2, [pc, #588]	@ (80028a0 <UART_SetConfig+0x2e8>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d127      	bne.n	80026a6 <UART_SetConfig+0xee>
 8002656:	4b93      	ldr	r3, [pc, #588]	@ (80028a4 <UART_SetConfig+0x2ec>)
 8002658:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800265a:	2203      	movs	r2, #3
 800265c:	4013      	ands	r3, r2
 800265e:	2b03      	cmp	r3, #3
 8002660:	d017      	beq.n	8002692 <UART_SetConfig+0xda>
 8002662:	d81b      	bhi.n	800269c <UART_SetConfig+0xe4>
 8002664:	2b02      	cmp	r3, #2
 8002666:	d00a      	beq.n	800267e <UART_SetConfig+0xc6>
 8002668:	d818      	bhi.n	800269c <UART_SetConfig+0xe4>
 800266a:	2b00      	cmp	r3, #0
 800266c:	d002      	beq.n	8002674 <UART_SetConfig+0xbc>
 800266e:	2b01      	cmp	r3, #1
 8002670:	d00a      	beq.n	8002688 <UART_SetConfig+0xd0>
 8002672:	e013      	b.n	800269c <UART_SetConfig+0xe4>
 8002674:	231f      	movs	r3, #31
 8002676:	18fb      	adds	r3, r7, r3
 8002678:	2200      	movs	r2, #0
 800267a:	701a      	strb	r2, [r3, #0]
 800267c:	e021      	b.n	80026c2 <UART_SetConfig+0x10a>
 800267e:	231f      	movs	r3, #31
 8002680:	18fb      	adds	r3, r7, r3
 8002682:	2202      	movs	r2, #2
 8002684:	701a      	strb	r2, [r3, #0]
 8002686:	e01c      	b.n	80026c2 <UART_SetConfig+0x10a>
 8002688:	231f      	movs	r3, #31
 800268a:	18fb      	adds	r3, r7, r3
 800268c:	2204      	movs	r2, #4
 800268e:	701a      	strb	r2, [r3, #0]
 8002690:	e017      	b.n	80026c2 <UART_SetConfig+0x10a>
 8002692:	231f      	movs	r3, #31
 8002694:	18fb      	adds	r3, r7, r3
 8002696:	2208      	movs	r2, #8
 8002698:	701a      	strb	r2, [r3, #0]
 800269a:	e012      	b.n	80026c2 <UART_SetConfig+0x10a>
 800269c:	231f      	movs	r3, #31
 800269e:	18fb      	adds	r3, r7, r3
 80026a0:	2210      	movs	r2, #16
 80026a2:	701a      	strb	r2, [r3, #0]
 80026a4:	e00d      	b.n	80026c2 <UART_SetConfig+0x10a>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a7f      	ldr	r2, [pc, #508]	@ (80028a8 <UART_SetConfig+0x2f0>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d104      	bne.n	80026ba <UART_SetConfig+0x102>
 80026b0:	231f      	movs	r3, #31
 80026b2:	18fb      	adds	r3, r7, r3
 80026b4:	2200      	movs	r2, #0
 80026b6:	701a      	strb	r2, [r3, #0]
 80026b8:	e003      	b.n	80026c2 <UART_SetConfig+0x10a>
 80026ba:	231f      	movs	r3, #31
 80026bc:	18fb      	adds	r3, r7, r3
 80026be:	2210      	movs	r2, #16
 80026c0:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	69da      	ldr	r2, [r3, #28]
 80026c6:	2380      	movs	r3, #128	@ 0x80
 80026c8:	021b      	lsls	r3, r3, #8
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d000      	beq.n	80026d0 <UART_SetConfig+0x118>
 80026ce:	e06f      	b.n	80027b0 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 80026d0:	231f      	movs	r3, #31
 80026d2:	18fb      	adds	r3, r7, r3
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	2b08      	cmp	r3, #8
 80026d8:	d01f      	beq.n	800271a <UART_SetConfig+0x162>
 80026da:	dc22      	bgt.n	8002722 <UART_SetConfig+0x16a>
 80026dc:	2b04      	cmp	r3, #4
 80026de:	d017      	beq.n	8002710 <UART_SetConfig+0x158>
 80026e0:	dc1f      	bgt.n	8002722 <UART_SetConfig+0x16a>
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d002      	beq.n	80026ec <UART_SetConfig+0x134>
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d005      	beq.n	80026f6 <UART_SetConfig+0x13e>
 80026ea:	e01a      	b.n	8002722 <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80026ec:	f7ff f91e 	bl	800192c <HAL_RCC_GetPCLK1Freq>
 80026f0:	0003      	movs	r3, r0
 80026f2:	61bb      	str	r3, [r7, #24]
        break;
 80026f4:	e01c      	b.n	8002730 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 80026f6:	4b6b      	ldr	r3, [pc, #428]	@ (80028a4 <UART_SetConfig+0x2ec>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	095b      	lsrs	r3, r3, #5
 80026fc:	2207      	movs	r2, #7
 80026fe:	4013      	ands	r3, r2
 8002700:	3301      	adds	r3, #1
 8002702:	0019      	movs	r1, r3
 8002704:	4869      	ldr	r0, [pc, #420]	@ (80028ac <UART_SetConfig+0x2f4>)
 8002706:	f7fd fcff 	bl	8000108 <__udivsi3>
 800270a:	0003      	movs	r3, r0
 800270c:	61bb      	str	r3, [r7, #24]
        break;
 800270e:	e00f      	b.n	8002730 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002710:	f7ff f89e 	bl	8001850 <HAL_RCC_GetSysClockFreq>
 8002714:	0003      	movs	r3, r0
 8002716:	61bb      	str	r3, [r7, #24]
        break;
 8002718:	e00a      	b.n	8002730 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800271a:	2380      	movs	r3, #128	@ 0x80
 800271c:	021b      	lsls	r3, r3, #8
 800271e:	61bb      	str	r3, [r7, #24]
        break;
 8002720:	e006      	b.n	8002730 <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 8002722:	2300      	movs	r3, #0
 8002724:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002726:	231e      	movs	r3, #30
 8002728:	18fb      	adds	r3, r7, r3
 800272a:	2201      	movs	r2, #1
 800272c:	701a      	strb	r2, [r3, #0]
        break;
 800272e:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d100      	bne.n	8002738 <UART_SetConfig+0x180>
 8002736:	e097      	b.n	8002868 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800273c:	4b5c      	ldr	r3, [pc, #368]	@ (80028b0 <UART_SetConfig+0x2f8>)
 800273e:	0052      	lsls	r2, r2, #1
 8002740:	5ad3      	ldrh	r3, [r2, r3]
 8002742:	0019      	movs	r1, r3
 8002744:	69b8      	ldr	r0, [r7, #24]
 8002746:	f7fd fcdf 	bl	8000108 <__udivsi3>
 800274a:	0003      	movs	r3, r0
 800274c:	005a      	lsls	r2, r3, #1
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	085b      	lsrs	r3, r3, #1
 8002754:	18d2      	adds	r2, r2, r3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	0019      	movs	r1, r3
 800275c:	0010      	movs	r0, r2
 800275e:	f7fd fcd3 	bl	8000108 <__udivsi3>
 8002762:	0003      	movs	r3, r0
 8002764:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	2b0f      	cmp	r3, #15
 800276a:	d91c      	bls.n	80027a6 <UART_SetConfig+0x1ee>
 800276c:	693a      	ldr	r2, [r7, #16]
 800276e:	2380      	movs	r3, #128	@ 0x80
 8002770:	025b      	lsls	r3, r3, #9
 8002772:	429a      	cmp	r2, r3
 8002774:	d217      	bcs.n	80027a6 <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	b29a      	uxth	r2, r3
 800277a:	200e      	movs	r0, #14
 800277c:	183b      	adds	r3, r7, r0
 800277e:	210f      	movs	r1, #15
 8002780:	438a      	bics	r2, r1
 8002782:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	085b      	lsrs	r3, r3, #1
 8002788:	b29b      	uxth	r3, r3
 800278a:	2207      	movs	r2, #7
 800278c:	4013      	ands	r3, r2
 800278e:	b299      	uxth	r1, r3
 8002790:	183b      	adds	r3, r7, r0
 8002792:	183a      	adds	r2, r7, r0
 8002794:	8812      	ldrh	r2, [r2, #0]
 8002796:	430a      	orrs	r2, r1
 8002798:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	183a      	adds	r2, r7, r0
 80027a0:	8812      	ldrh	r2, [r2, #0]
 80027a2:	60da      	str	r2, [r3, #12]
 80027a4:	e060      	b.n	8002868 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 80027a6:	231e      	movs	r3, #30
 80027a8:	18fb      	adds	r3, r7, r3
 80027aa:	2201      	movs	r2, #1
 80027ac:	701a      	strb	r2, [r3, #0]
 80027ae:	e05b      	b.n	8002868 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80027b0:	231f      	movs	r3, #31
 80027b2:	18fb      	adds	r3, r7, r3
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	2b08      	cmp	r3, #8
 80027b8:	d01f      	beq.n	80027fa <UART_SetConfig+0x242>
 80027ba:	dc22      	bgt.n	8002802 <UART_SetConfig+0x24a>
 80027bc:	2b04      	cmp	r3, #4
 80027be:	d017      	beq.n	80027f0 <UART_SetConfig+0x238>
 80027c0:	dc1f      	bgt.n	8002802 <UART_SetConfig+0x24a>
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d002      	beq.n	80027cc <UART_SetConfig+0x214>
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d005      	beq.n	80027d6 <UART_SetConfig+0x21e>
 80027ca:	e01a      	b.n	8002802 <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80027cc:	f7ff f8ae 	bl	800192c <HAL_RCC_GetPCLK1Freq>
 80027d0:	0003      	movs	r3, r0
 80027d2:	61bb      	str	r3, [r7, #24]
        break;
 80027d4:	e01c      	b.n	8002810 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 80027d6:	4b33      	ldr	r3, [pc, #204]	@ (80028a4 <UART_SetConfig+0x2ec>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	095b      	lsrs	r3, r3, #5
 80027dc:	2207      	movs	r2, #7
 80027de:	4013      	ands	r3, r2
 80027e0:	3301      	adds	r3, #1
 80027e2:	0019      	movs	r1, r3
 80027e4:	4831      	ldr	r0, [pc, #196]	@ (80028ac <UART_SetConfig+0x2f4>)
 80027e6:	f7fd fc8f 	bl	8000108 <__udivsi3>
 80027ea:	0003      	movs	r3, r0
 80027ec:	61bb      	str	r3, [r7, #24]
        break;
 80027ee:	e00f      	b.n	8002810 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80027f0:	f7ff f82e 	bl	8001850 <HAL_RCC_GetSysClockFreq>
 80027f4:	0003      	movs	r3, r0
 80027f6:	61bb      	str	r3, [r7, #24]
        break;
 80027f8:	e00a      	b.n	8002810 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80027fa:	2380      	movs	r3, #128	@ 0x80
 80027fc:	021b      	lsls	r3, r3, #8
 80027fe:	61bb      	str	r3, [r7, #24]
        break;
 8002800:	e006      	b.n	8002810 <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 8002802:	2300      	movs	r3, #0
 8002804:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002806:	231e      	movs	r3, #30
 8002808:	18fb      	adds	r3, r7, r3
 800280a:	2201      	movs	r2, #1
 800280c:	701a      	strb	r2, [r3, #0]
        break;
 800280e:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d028      	beq.n	8002868 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800281a:	4b25      	ldr	r3, [pc, #148]	@ (80028b0 <UART_SetConfig+0x2f8>)
 800281c:	0052      	lsls	r2, r2, #1
 800281e:	5ad3      	ldrh	r3, [r2, r3]
 8002820:	0019      	movs	r1, r3
 8002822:	69b8      	ldr	r0, [r7, #24]
 8002824:	f7fd fc70 	bl	8000108 <__udivsi3>
 8002828:	0003      	movs	r3, r0
 800282a:	001a      	movs	r2, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	085b      	lsrs	r3, r3, #1
 8002832:	18d2      	adds	r2, r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	0019      	movs	r1, r3
 800283a:	0010      	movs	r0, r2
 800283c:	f7fd fc64 	bl	8000108 <__udivsi3>
 8002840:	0003      	movs	r3, r0
 8002842:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	2b0f      	cmp	r3, #15
 8002848:	d90a      	bls.n	8002860 <UART_SetConfig+0x2a8>
 800284a:	693a      	ldr	r2, [r7, #16]
 800284c:	2380      	movs	r3, #128	@ 0x80
 800284e:	025b      	lsls	r3, r3, #9
 8002850:	429a      	cmp	r2, r3
 8002852:	d205      	bcs.n	8002860 <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	b29a      	uxth	r2, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	60da      	str	r2, [r3, #12]
 800285e:	e003      	b.n	8002868 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8002860:	231e      	movs	r3, #30
 8002862:	18fb      	adds	r3, r7, r3
 8002864:	2201      	movs	r2, #1
 8002866:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	226a      	movs	r2, #106	@ 0x6a
 800286c:	2101      	movs	r1, #1
 800286e:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2268      	movs	r2, #104	@ 0x68
 8002874:	2101      	movs	r1, #1
 8002876:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8002884:	231e      	movs	r3, #30
 8002886:	18fb      	adds	r3, r7, r3
 8002888:	781b      	ldrb	r3, [r3, #0]
}
 800288a:	0018      	movs	r0, r3
 800288c:	46bd      	mov	sp, r7
 800288e:	b008      	add	sp, #32
 8002890:	bd80      	pop	{r7, pc}
 8002892:	46c0      	nop			@ (mov r8, r8)
 8002894:	cfff69f3 	.word	0xcfff69f3
 8002898:	ffffcfff 	.word	0xffffcfff
 800289c:	11fff4ff 	.word	0x11fff4ff
 80028a0:	40013800 	.word	0x40013800
 80028a4:	40021000 	.word	0x40021000
 80028a8:	40004400 	.word	0x40004400
 80028ac:	02dc6c00 	.word	0x02dc6c00
 80028b0:	08003140 	.word	0x08003140

080028b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028c0:	2208      	movs	r2, #8
 80028c2:	4013      	ands	r3, r2
 80028c4:	d00b      	beq.n	80028de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	4a4a      	ldr	r2, [pc, #296]	@ (80029f8 <UART_AdvFeatureConfig+0x144>)
 80028ce:	4013      	ands	r3, r2
 80028d0:	0019      	movs	r1, r3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	430a      	orrs	r2, r1
 80028dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028e2:	2201      	movs	r2, #1
 80028e4:	4013      	ands	r3, r2
 80028e6:	d00b      	beq.n	8002900 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	4a43      	ldr	r2, [pc, #268]	@ (80029fc <UART_AdvFeatureConfig+0x148>)
 80028f0:	4013      	ands	r3, r2
 80028f2:	0019      	movs	r1, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	430a      	orrs	r2, r1
 80028fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002904:	2202      	movs	r2, #2
 8002906:	4013      	ands	r3, r2
 8002908:	d00b      	beq.n	8002922 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	4a3b      	ldr	r2, [pc, #236]	@ (8002a00 <UART_AdvFeatureConfig+0x14c>)
 8002912:	4013      	ands	r3, r2
 8002914:	0019      	movs	r1, r3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	430a      	orrs	r2, r1
 8002920:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002926:	2204      	movs	r2, #4
 8002928:	4013      	ands	r3, r2
 800292a:	d00b      	beq.n	8002944 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	4a34      	ldr	r2, [pc, #208]	@ (8002a04 <UART_AdvFeatureConfig+0x150>)
 8002934:	4013      	ands	r3, r2
 8002936:	0019      	movs	r1, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	430a      	orrs	r2, r1
 8002942:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002948:	2210      	movs	r2, #16
 800294a:	4013      	ands	r3, r2
 800294c:	d00b      	beq.n	8002966 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	4a2c      	ldr	r2, [pc, #176]	@ (8002a08 <UART_AdvFeatureConfig+0x154>)
 8002956:	4013      	ands	r3, r2
 8002958:	0019      	movs	r1, r3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	430a      	orrs	r2, r1
 8002964:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800296a:	2220      	movs	r2, #32
 800296c:	4013      	ands	r3, r2
 800296e:	d00b      	beq.n	8002988 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	4a25      	ldr	r2, [pc, #148]	@ (8002a0c <UART_AdvFeatureConfig+0x158>)
 8002978:	4013      	ands	r3, r2
 800297a:	0019      	movs	r1, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	430a      	orrs	r2, r1
 8002986:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800298c:	2240      	movs	r2, #64	@ 0x40
 800298e:	4013      	ands	r3, r2
 8002990:	d01d      	beq.n	80029ce <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	4a1d      	ldr	r2, [pc, #116]	@ (8002a10 <UART_AdvFeatureConfig+0x15c>)
 800299a:	4013      	ands	r3, r2
 800299c:	0019      	movs	r1, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	430a      	orrs	r2, r1
 80029a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80029ae:	2380      	movs	r3, #128	@ 0x80
 80029b0:	035b      	lsls	r3, r3, #13
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d10b      	bne.n	80029ce <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	4a15      	ldr	r2, [pc, #84]	@ (8002a14 <UART_AdvFeatureConfig+0x160>)
 80029be:	4013      	ands	r3, r2
 80029c0:	0019      	movs	r1, r3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	430a      	orrs	r2, r1
 80029cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029d2:	2280      	movs	r2, #128	@ 0x80
 80029d4:	4013      	ands	r3, r2
 80029d6:	d00b      	beq.n	80029f0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	4a0e      	ldr	r2, [pc, #56]	@ (8002a18 <UART_AdvFeatureConfig+0x164>)
 80029e0:	4013      	ands	r3, r2
 80029e2:	0019      	movs	r1, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	430a      	orrs	r2, r1
 80029ee:	605a      	str	r2, [r3, #4]
  }
}
 80029f0:	46c0      	nop			@ (mov r8, r8)
 80029f2:	46bd      	mov	sp, r7
 80029f4:	b002      	add	sp, #8
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	ffff7fff 	.word	0xffff7fff
 80029fc:	fffdffff 	.word	0xfffdffff
 8002a00:	fffeffff 	.word	0xfffeffff
 8002a04:	fffbffff 	.word	0xfffbffff
 8002a08:	ffffefff 	.word	0xffffefff
 8002a0c:	ffffdfff 	.word	0xffffdfff
 8002a10:	ffefffff 	.word	0xffefffff
 8002a14:	ff9fffff 	.word	0xff9fffff
 8002a18:	fff7ffff 	.word	0xfff7ffff

08002a1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b092      	sub	sp, #72	@ 0x48
 8002a20:	af02      	add	r7, sp, #8
 8002a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2290      	movs	r2, #144	@ 0x90
 8002a28:	2100      	movs	r1, #0
 8002a2a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002a2c:	f7fe f88e 	bl	8000b4c <HAL_GetTick>
 8002a30:	0003      	movs	r3, r0
 8002a32:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	2208      	movs	r2, #8
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	2b08      	cmp	r3, #8
 8002a40:	d12d      	bne.n	8002a9e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002a42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a44:	2280      	movs	r2, #128	@ 0x80
 8002a46:	0391      	lsls	r1, r2, #14
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	4a47      	ldr	r2, [pc, #284]	@ (8002b68 <UART_CheckIdleState+0x14c>)
 8002a4c:	9200      	str	r2, [sp, #0]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f000 f88e 	bl	8002b70 <UART_WaitOnFlagUntilTimeout>
 8002a54:	1e03      	subs	r3, r0, #0
 8002a56:	d022      	beq.n	8002a9e <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002a58:	f3ef 8310 	mrs	r3, PRIMASK
 8002a5c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8002a60:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002a62:	2301      	movs	r3, #1
 8002a64:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a68:	f383 8810 	msr	PRIMASK, r3
}
 8002a6c:	46c0      	nop			@ (mov r8, r8)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	2180      	movs	r1, #128	@ 0x80
 8002a7a:	438a      	bics	r2, r1
 8002a7c:	601a      	str	r2, [r3, #0]
 8002a7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a84:	f383 8810 	msr	PRIMASK, r3
}
 8002a88:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2288      	movs	r2, #136	@ 0x88
 8002a8e:	2120      	movs	r1, #32
 8002a90:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2284      	movs	r2, #132	@ 0x84
 8002a96:	2100      	movs	r1, #0
 8002a98:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e060      	b.n	8002b60 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2204      	movs	r2, #4
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	2b04      	cmp	r3, #4
 8002aaa:	d146      	bne.n	8002b3a <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002aac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002aae:	2280      	movs	r2, #128	@ 0x80
 8002ab0:	03d1      	lsls	r1, r2, #15
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	4a2c      	ldr	r2, [pc, #176]	@ (8002b68 <UART_CheckIdleState+0x14c>)
 8002ab6:	9200      	str	r2, [sp, #0]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f000 f859 	bl	8002b70 <UART_WaitOnFlagUntilTimeout>
 8002abe:	1e03      	subs	r3, r0, #0
 8002ac0:	d03b      	beq.n	8002b3a <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002ac2:	f3ef 8310 	mrs	r3, PRIMASK
 8002ac6:	60fb      	str	r3, [r7, #12]
  return(result);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002aca:	637b      	str	r3, [r7, #52]	@ 0x34
 8002acc:	2301      	movs	r3, #1
 8002ace:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	f383 8810 	msr	PRIMASK, r3
}
 8002ad6:	46c0      	nop			@ (mov r8, r8)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4922      	ldr	r1, [pc, #136]	@ (8002b6c <UART_CheckIdleState+0x150>)
 8002ae4:	400a      	ands	r2, r1
 8002ae6:	601a      	str	r2, [r3, #0]
 8002ae8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002aea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	f383 8810 	msr	PRIMASK, r3
}
 8002af2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002af4:	f3ef 8310 	mrs	r3, PRIMASK
 8002af8:	61bb      	str	r3, [r7, #24]
  return(result);
 8002afa:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002afc:	633b      	str	r3, [r7, #48]	@ 0x30
 8002afe:	2301      	movs	r3, #1
 8002b00:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	f383 8810 	msr	PRIMASK, r3
}
 8002b08:	46c0      	nop			@ (mov r8, r8)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	689a      	ldr	r2, [r3, #8]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2101      	movs	r1, #1
 8002b16:	438a      	bics	r2, r1
 8002b18:	609a      	str	r2, [r3, #8]
 8002b1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b1c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b1e:	6a3b      	ldr	r3, [r7, #32]
 8002b20:	f383 8810 	msr	PRIMASK, r3
}
 8002b24:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	228c      	movs	r2, #140	@ 0x8c
 8002b2a:	2120      	movs	r1, #32
 8002b2c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2284      	movs	r2, #132	@ 0x84
 8002b32:	2100      	movs	r1, #0
 8002b34:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e012      	b.n	8002b60 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2288      	movs	r2, #136	@ 0x88
 8002b3e:	2120      	movs	r1, #32
 8002b40:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	228c      	movs	r2, #140	@ 0x8c
 8002b46:	2120      	movs	r1, #32
 8002b48:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2284      	movs	r2, #132	@ 0x84
 8002b5a:	2100      	movs	r1, #0
 8002b5c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b5e:	2300      	movs	r3, #0
}
 8002b60:	0018      	movs	r0, r3
 8002b62:	46bd      	mov	sp, r7
 8002b64:	b010      	add	sp, #64	@ 0x40
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	01ffffff 	.word	0x01ffffff
 8002b6c:	fffffedf 	.word	0xfffffedf

08002b70 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	603b      	str	r3, [r7, #0]
 8002b7c:	1dfb      	adds	r3, r7, #7
 8002b7e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b80:	e051      	b.n	8002c26 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	3301      	adds	r3, #1
 8002b86:	d04e      	beq.n	8002c26 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b88:	f7fd ffe0 	bl	8000b4c <HAL_GetTick>
 8002b8c:	0002      	movs	r2, r0
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	69ba      	ldr	r2, [r7, #24]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d302      	bcc.n	8002b9e <UART_WaitOnFlagUntilTimeout+0x2e>
 8002b98:	69bb      	ldr	r3, [r7, #24]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d101      	bne.n	8002ba2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e051      	b.n	8002c46 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2204      	movs	r2, #4
 8002baa:	4013      	ands	r3, r2
 8002bac:	d03b      	beq.n	8002c26 <UART_WaitOnFlagUntilTimeout+0xb6>
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	2b80      	cmp	r3, #128	@ 0x80
 8002bb2:	d038      	beq.n	8002c26 <UART_WaitOnFlagUntilTimeout+0xb6>
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	2b40      	cmp	r3, #64	@ 0x40
 8002bb8:	d035      	beq.n	8002c26 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	69db      	ldr	r3, [r3, #28]
 8002bc0:	2208      	movs	r2, #8
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	2b08      	cmp	r3, #8
 8002bc6:	d111      	bne.n	8002bec <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2208      	movs	r2, #8
 8002bce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	0018      	movs	r0, r3
 8002bd4:	f000 f83c 	bl	8002c50 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2290      	movs	r2, #144	@ 0x90
 8002bdc:	2108      	movs	r1, #8
 8002bde:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2284      	movs	r2, #132	@ 0x84
 8002be4:	2100      	movs	r1, #0
 8002be6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e02c      	b.n	8002c46 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	69da      	ldr	r2, [r3, #28]
 8002bf2:	2380      	movs	r3, #128	@ 0x80
 8002bf4:	011b      	lsls	r3, r3, #4
 8002bf6:	401a      	ands	r2, r3
 8002bf8:	2380      	movs	r3, #128	@ 0x80
 8002bfa:	011b      	lsls	r3, r3, #4
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d112      	bne.n	8002c26 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	2280      	movs	r2, #128	@ 0x80
 8002c06:	0112      	lsls	r2, r2, #4
 8002c08:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	0018      	movs	r0, r3
 8002c0e:	f000 f81f 	bl	8002c50 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2290      	movs	r2, #144	@ 0x90
 8002c16:	2120      	movs	r1, #32
 8002c18:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2284      	movs	r2, #132	@ 0x84
 8002c1e:	2100      	movs	r1, #0
 8002c20:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e00f      	b.n	8002c46 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	69db      	ldr	r3, [r3, #28]
 8002c2c:	68ba      	ldr	r2, [r7, #8]
 8002c2e:	4013      	ands	r3, r2
 8002c30:	68ba      	ldr	r2, [r7, #8]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	425a      	negs	r2, r3
 8002c36:	4153      	adcs	r3, r2
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	001a      	movs	r2, r3
 8002c3c:	1dfb      	adds	r3, r7, #7
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d09e      	beq.n	8002b82 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	0018      	movs	r0, r3
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	b004      	add	sp, #16
 8002c4c:	bd80      	pop	{r7, pc}
	...

08002c50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b08e      	sub	sp, #56	@ 0x38
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002c58:	f3ef 8310 	mrs	r3, PRIMASK
 8002c5c:	617b      	str	r3, [r7, #20]
  return(result);
 8002c5e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002c60:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c62:	2301      	movs	r3, #1
 8002c64:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c66:	69bb      	ldr	r3, [r7, #24]
 8002c68:	f383 8810 	msr	PRIMASK, r3
}
 8002c6c:	46c0      	nop			@ (mov r8, r8)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4926      	ldr	r1, [pc, #152]	@ (8002d14 <UART_EndRxTransfer+0xc4>)
 8002c7a:	400a      	ands	r2, r1
 8002c7c:	601a      	str	r2, [r3, #0]
 8002c7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c80:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	f383 8810 	msr	PRIMASK, r3
}
 8002c88:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002c8a:	f3ef 8310 	mrs	r3, PRIMASK
 8002c8e:	623b      	str	r3, [r7, #32]
  return(result);
 8002c90:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002c92:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c94:	2301      	movs	r3, #1
 8002c96:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c9a:	f383 8810 	msr	PRIMASK, r3
}
 8002c9e:	46c0      	nop			@ (mov r8, r8)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	689a      	ldr	r2, [r3, #8]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	491b      	ldr	r1, [pc, #108]	@ (8002d18 <UART_EndRxTransfer+0xc8>)
 8002cac:	400a      	ands	r2, r1
 8002cae:	609a      	str	r2, [r3, #8]
 8002cb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cb2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cb6:	f383 8810 	msr	PRIMASK, r3
}
 8002cba:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d118      	bne.n	8002cf6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002cc4:	f3ef 8310 	mrs	r3, PRIMASK
 8002cc8:	60bb      	str	r3, [r7, #8]
  return(result);
 8002cca:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ccc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002cce:	2301      	movs	r3, #1
 8002cd0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	f383 8810 	msr	PRIMASK, r3
}
 8002cd8:	46c0      	nop			@ (mov r8, r8)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2110      	movs	r1, #16
 8002ce6:	438a      	bics	r2, r1
 8002ce8:	601a      	str	r2, [r3, #0]
 8002cea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	f383 8810 	msr	PRIMASK, r3
}
 8002cf4:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	228c      	movs	r2, #140	@ 0x8c
 8002cfa:	2120      	movs	r1, #32
 8002cfc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8002d0a:	46c0      	nop			@ (mov r8, r8)
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	b00e      	add	sp, #56	@ 0x38
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	46c0      	nop			@ (mov r8, r8)
 8002d14:	fffffedf 	.word	0xfffffedf
 8002d18:	effffffe 	.word	0xeffffffe

08002d1c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d28:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	225e      	movs	r2, #94	@ 0x5e
 8002d2e:	2100      	movs	r1, #0
 8002d30:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2256      	movs	r2, #86	@ 0x56
 8002d36:	2100      	movs	r1, #0
 8002d38:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	0018      	movs	r0, r3
 8002d3e:	f7ff fc27 	bl	8002590 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002d42:	46c0      	nop			@ (mov r8, r8)
 8002d44:	46bd      	mov	sp, r7
 8002d46:	b004      	add	sp, #16
 8002d48:	bd80      	pop	{r7, pc}

08002d4a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002d4a:	b580      	push	{r7, lr}
 8002d4c:	b086      	sub	sp, #24
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002d52:	f3ef 8310 	mrs	r3, PRIMASK
 8002d56:	60bb      	str	r3, [r7, #8]
  return(result);
 8002d58:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002d5a:	617b      	str	r3, [r7, #20]
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f383 8810 	msr	PRIMASK, r3
}
 8002d66:	46c0      	nop			@ (mov r8, r8)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	2140      	movs	r1, #64	@ 0x40
 8002d74:	438a      	bics	r2, r1
 8002d76:	601a      	str	r2, [r3, #0]
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	f383 8810 	msr	PRIMASK, r3
}
 8002d82:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2288      	movs	r2, #136	@ 0x88
 8002d88:	2120      	movs	r1, #32
 8002d8a:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	0018      	movs	r0, r3
 8002d96:	f7ff fbf3 	bl	8002580 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002d9a:	46c0      	nop			@ (mov r8, r8)
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	b006      	add	sp, #24
 8002da0:	bd80      	pop	{r7, pc}

08002da2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8002da2:	b580      	push	{r7, lr}
 8002da4:	b082      	sub	sp, #8
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8002daa:	46c0      	nop			@ (mov r8, r8)
 8002dac:	46bd      	mov	sp, r7
 8002dae:	b002      	add	sp, #8
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b082      	sub	sp, #8
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8002dba:	46c0      	nop			@ (mov r8, r8)
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	b002      	add	sp, #8
 8002dc0:	bd80      	pop	{r7, pc}

08002dc2 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8002dc2:	b580      	push	{r7, lr}
 8002dc4:	b082      	sub	sp, #8
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8002dca:	46c0      	nop			@ (mov r8, r8)
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	b002      	add	sp, #8
 8002dd0:	bd80      	pop	{r7, pc}
	...

08002dd4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2284      	movs	r2, #132	@ 0x84
 8002de0:	5c9b      	ldrb	r3, [r3, r2]
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d101      	bne.n	8002dea <HAL_UARTEx_DisableFifoMode+0x16>
 8002de6:	2302      	movs	r3, #2
 8002de8:	e027      	b.n	8002e3a <HAL_UARTEx_DisableFifoMode+0x66>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2284      	movs	r2, #132	@ 0x84
 8002dee:	2101      	movs	r1, #1
 8002df0:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2288      	movs	r2, #136	@ 0x88
 8002df6:	2124      	movs	r1, #36	@ 0x24
 8002df8:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2101      	movs	r1, #1
 8002e0e:	438a      	bics	r2, r1
 8002e10:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	4a0b      	ldr	r2, [pc, #44]	@ (8002e44 <HAL_UARTEx_DisableFifoMode+0x70>)
 8002e16:	4013      	ands	r3, r2
 8002e18:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	68fa      	ldr	r2, [r7, #12]
 8002e26:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2288      	movs	r2, #136	@ 0x88
 8002e2c:	2120      	movs	r1, #32
 8002e2e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2284      	movs	r2, #132	@ 0x84
 8002e34:	2100      	movs	r1, #0
 8002e36:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	0018      	movs	r0, r3
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	b004      	add	sp, #16
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	46c0      	nop			@ (mov r8, r8)
 8002e44:	dfffffff 	.word	0xdfffffff

08002e48 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b084      	sub	sp, #16
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2284      	movs	r2, #132	@ 0x84
 8002e56:	5c9b      	ldrb	r3, [r3, r2]
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d101      	bne.n	8002e60 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8002e5c:	2302      	movs	r3, #2
 8002e5e:	e02e      	b.n	8002ebe <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2284      	movs	r2, #132	@ 0x84
 8002e64:	2101      	movs	r1, #1
 8002e66:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2288      	movs	r2, #136	@ 0x88
 8002e6c:	2124      	movs	r1, #36	@ 0x24
 8002e6e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2101      	movs	r1, #1
 8002e84:	438a      	bics	r2, r1
 8002e86:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	00db      	lsls	r3, r3, #3
 8002e90:	08d9      	lsrs	r1, r3, #3
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	683a      	ldr	r2, [r7, #0]
 8002e98:	430a      	orrs	r2, r1
 8002e9a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	0018      	movs	r0, r3
 8002ea0:	f000 f854 	bl	8002f4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	68fa      	ldr	r2, [r7, #12]
 8002eaa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2288      	movs	r2, #136	@ 0x88
 8002eb0:	2120      	movs	r1, #32
 8002eb2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2284      	movs	r2, #132	@ 0x84
 8002eb8:	2100      	movs	r1, #0
 8002eba:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	0018      	movs	r0, r3
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	b004      	add	sp, #16
 8002ec4:	bd80      	pop	{r7, pc}
	...

08002ec8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2284      	movs	r2, #132	@ 0x84
 8002ed6:	5c9b      	ldrb	r3, [r3, r2]
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d101      	bne.n	8002ee0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8002edc:	2302      	movs	r3, #2
 8002ede:	e02f      	b.n	8002f40 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2284      	movs	r2, #132	@ 0x84
 8002ee4:	2101      	movs	r1, #1
 8002ee6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2288      	movs	r2, #136	@ 0x88
 8002eec:	2124      	movs	r1, #36	@ 0x24
 8002eee:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	2101      	movs	r1, #1
 8002f04:	438a      	bics	r2, r1
 8002f06:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	4a0e      	ldr	r2, [pc, #56]	@ (8002f48 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8002f10:	4013      	ands	r3, r2
 8002f12:	0019      	movs	r1, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	683a      	ldr	r2, [r7, #0]
 8002f1a:	430a      	orrs	r2, r1
 8002f1c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	0018      	movs	r0, r3
 8002f22:	f000 f813 	bl	8002f4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	68fa      	ldr	r2, [r7, #12]
 8002f2c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2288      	movs	r2, #136	@ 0x88
 8002f32:	2120      	movs	r1, #32
 8002f34:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2284      	movs	r2, #132	@ 0x84
 8002f3a:	2100      	movs	r1, #0
 8002f3c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f3e:	2300      	movs	r3, #0
}
 8002f40:	0018      	movs	r0, r3
 8002f42:	46bd      	mov	sp, r7
 8002f44:	b004      	add	sp, #16
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	f1ffffff 	.word	0xf1ffffff

08002f4c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8002f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f4e:	b085      	sub	sp, #20
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d108      	bne.n	8002f6e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	226a      	movs	r2, #106	@ 0x6a
 8002f60:	2101      	movs	r1, #1
 8002f62:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2268      	movs	r2, #104	@ 0x68
 8002f68:	2101      	movs	r1, #1
 8002f6a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002f6c:	e043      	b.n	8002ff6 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8002f6e:	260f      	movs	r6, #15
 8002f70:	19bb      	adds	r3, r7, r6
 8002f72:	2208      	movs	r2, #8
 8002f74:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8002f76:	200e      	movs	r0, #14
 8002f78:	183b      	adds	r3, r7, r0
 8002f7a:	2208      	movs	r2, #8
 8002f7c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	0e5b      	lsrs	r3, r3, #25
 8002f86:	b2da      	uxtb	r2, r3
 8002f88:	240d      	movs	r4, #13
 8002f8a:	193b      	adds	r3, r7, r4
 8002f8c:	2107      	movs	r1, #7
 8002f8e:	400a      	ands	r2, r1
 8002f90:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	0f5b      	lsrs	r3, r3, #29
 8002f9a:	b2da      	uxtb	r2, r3
 8002f9c:	250c      	movs	r5, #12
 8002f9e:	197b      	adds	r3, r7, r5
 8002fa0:	2107      	movs	r1, #7
 8002fa2:	400a      	ands	r2, r1
 8002fa4:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002fa6:	183b      	adds	r3, r7, r0
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	197a      	adds	r2, r7, r5
 8002fac:	7812      	ldrb	r2, [r2, #0]
 8002fae:	4914      	ldr	r1, [pc, #80]	@ (8003000 <UARTEx_SetNbDataToProcess+0xb4>)
 8002fb0:	5c8a      	ldrb	r2, [r1, r2]
 8002fb2:	435a      	muls	r2, r3
 8002fb4:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8002fb6:	197b      	adds	r3, r7, r5
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	4a12      	ldr	r2, [pc, #72]	@ (8003004 <UARTEx_SetNbDataToProcess+0xb8>)
 8002fbc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002fbe:	0019      	movs	r1, r3
 8002fc0:	f7fd f92c 	bl	800021c <__divsi3>
 8002fc4:	0003      	movs	r3, r0
 8002fc6:	b299      	uxth	r1, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	226a      	movs	r2, #106	@ 0x6a
 8002fcc:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002fce:	19bb      	adds	r3, r7, r6
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	193a      	adds	r2, r7, r4
 8002fd4:	7812      	ldrb	r2, [r2, #0]
 8002fd6:	490a      	ldr	r1, [pc, #40]	@ (8003000 <UARTEx_SetNbDataToProcess+0xb4>)
 8002fd8:	5c8a      	ldrb	r2, [r1, r2]
 8002fda:	435a      	muls	r2, r3
 8002fdc:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8002fde:	193b      	adds	r3, r7, r4
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	4a08      	ldr	r2, [pc, #32]	@ (8003004 <UARTEx_SetNbDataToProcess+0xb8>)
 8002fe4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8002fe6:	0019      	movs	r1, r3
 8002fe8:	f7fd f918 	bl	800021c <__divsi3>
 8002fec:	0003      	movs	r3, r0
 8002fee:	b299      	uxth	r1, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2268      	movs	r2, #104	@ 0x68
 8002ff4:	5299      	strh	r1, [r3, r2]
}
 8002ff6:	46c0      	nop			@ (mov r8, r8)
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	b005      	add	sp, #20
 8002ffc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ffe:	46c0      	nop			@ (mov r8, r8)
 8003000:	08003158 	.word	0x08003158
 8003004:	08003160 	.word	0x08003160

08003008 <memset>:
 8003008:	0003      	movs	r3, r0
 800300a:	1882      	adds	r2, r0, r2
 800300c:	4293      	cmp	r3, r2
 800300e:	d100      	bne.n	8003012 <memset+0xa>
 8003010:	4770      	bx	lr
 8003012:	7019      	strb	r1, [r3, #0]
 8003014:	3301      	adds	r3, #1
 8003016:	e7f9      	b.n	800300c <memset+0x4>

08003018 <__libc_init_array>:
 8003018:	b570      	push	{r4, r5, r6, lr}
 800301a:	2600      	movs	r6, #0
 800301c:	4c0c      	ldr	r4, [pc, #48]	@ (8003050 <__libc_init_array+0x38>)
 800301e:	4d0d      	ldr	r5, [pc, #52]	@ (8003054 <__libc_init_array+0x3c>)
 8003020:	1b64      	subs	r4, r4, r5
 8003022:	10a4      	asrs	r4, r4, #2
 8003024:	42a6      	cmp	r6, r4
 8003026:	d109      	bne.n	800303c <__libc_init_array+0x24>
 8003028:	2600      	movs	r6, #0
 800302a:	f000 f823 	bl	8003074 <_init>
 800302e:	4c0a      	ldr	r4, [pc, #40]	@ (8003058 <__libc_init_array+0x40>)
 8003030:	4d0a      	ldr	r5, [pc, #40]	@ (800305c <__libc_init_array+0x44>)
 8003032:	1b64      	subs	r4, r4, r5
 8003034:	10a4      	asrs	r4, r4, #2
 8003036:	42a6      	cmp	r6, r4
 8003038:	d105      	bne.n	8003046 <__libc_init_array+0x2e>
 800303a:	bd70      	pop	{r4, r5, r6, pc}
 800303c:	00b3      	lsls	r3, r6, #2
 800303e:	58eb      	ldr	r3, [r5, r3]
 8003040:	4798      	blx	r3
 8003042:	3601      	adds	r6, #1
 8003044:	e7ee      	b.n	8003024 <__libc_init_array+0xc>
 8003046:	00b3      	lsls	r3, r6, #2
 8003048:	58eb      	ldr	r3, [r5, r3]
 800304a:	4798      	blx	r3
 800304c:	3601      	adds	r6, #1
 800304e:	e7f2      	b.n	8003036 <__libc_init_array+0x1e>
 8003050:	08003168 	.word	0x08003168
 8003054:	08003168 	.word	0x08003168
 8003058:	0800316c 	.word	0x0800316c
 800305c:	08003168 	.word	0x08003168

08003060 <memcpy>:
 8003060:	2300      	movs	r3, #0
 8003062:	b510      	push	{r4, lr}
 8003064:	429a      	cmp	r2, r3
 8003066:	d100      	bne.n	800306a <memcpy+0xa>
 8003068:	bd10      	pop	{r4, pc}
 800306a:	5ccc      	ldrb	r4, [r1, r3]
 800306c:	54c4      	strb	r4, [r0, r3]
 800306e:	3301      	adds	r3, #1
 8003070:	e7f8      	b.n	8003064 <memcpy+0x4>
	...

08003074 <_init>:
 8003074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003076:	46c0      	nop			@ (mov r8, r8)
 8003078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800307a:	bc08      	pop	{r3}
 800307c:	469e      	mov	lr, r3
 800307e:	4770      	bx	lr

08003080 <_fini>:
 8003080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003082:	46c0      	nop			@ (mov r8, r8)
 8003084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003086:	bc08      	pop	{r3}
 8003088:	469e      	mov	lr, r3
 800308a:	4770      	bx	lr
